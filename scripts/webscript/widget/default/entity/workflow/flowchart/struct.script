// A script to return structure of a flowchart
// components: webix (window, forms), mermaid (flowchart)

/* NOTES:
1. Declare a non-webix component (e.g. mermaid flowchart) in window map, define in protoViews map ("flowchart_workflow_<KEY>" in this script)
*/

require '///webscript/components' as components;

data = fromjson(data);
w = fromjson(widgetParams);
KEY = w.key;

response = {};

windowId = "window_flowchart_workflow_" + KEY;

window = {
	"properties": {
		"id": windowId,
		"view": "window",
		"height": 500,
		"width": 600,
		"move": true,
		"resize": true,
		"body": {}
	},
	"count": {
		"rows": 1,
		"row0_cols": 2
	},
	"components": {
		"head": components.webixHeader({"windowId": windowId, "title": title + ": " + data.workflowURI}),
		"00": {
			"id": "flowchart_workflow_" + KEY,
			"view": "mermaidFlowchart",
			"height": 500,
			"width": 400
		},
		"01": {
			"css": "workflow-actions-container",
			"rows": [
				{
					"view": "label",
					"label": "Actions",
					"align": "center",
					"css": "col-heading"
				},
				{
					"id": "button_listWorkorders_" + KEY,
					"view": "button",
					"label": "Show Workorders",
					"css": "action-button-container cushioned",
					"click": "tasks.listWorkorders({'workflowPath': '" + KEY + "', 'parentViewId': '" + windowId + "'})"
				},
				{
					"view": "layout",
					"id": "form_workflow_addParameter_" + KEY,
					"css": "cushioned",
					"rows": [
						{
							"id": "button_workflowAddParameter_" + KEY,
							"view": "button",
							"label": "Add Parameter",
							"css": "action-button-container",
							"click": "tasks.renderParameterElements({'formName':'form_workflow_addParameter_" + KEY + "', 'path':'" + KEY + "', 'prefix': 'workflow'})"
						}
					]
				},
				{
					"id": "button_workflowRunner_" + KEY,
					"view": "button",
					"label": "Run Workflow",
					"css": "action-button-container cushioned cushioned-last",
					"click": "tasks.runWorkflow"
				}
			]
		}
	}
};

response.window = window;

protoViews = {
	"flowchart_workflow_" + KEY: {
		"name": "mermaidFlowchart",
		"id": "mermaidFlowchart_workflow_" + KEY,
		"innerHtml": "<div id='mermaidFlowchart_workflow_" + KEY + "' style='margin-left:2%;height:100%;width:100%;overflow:scroll' class='mermaid'>" + getFlowchartData(data) + "</div>"
	}
};

response.protoViews = protoViews;

def getFlowchartData(data)
    flowchart = "graph TB";

    stepsMap = {};

    for i = 0 to size(data.steps) - 1 do
        _thisStep = data.steps[i];

        initiatingStep = (stepsMap[_thisStep.name] == null) ? _thisStep.name + "(" + _thisStep.name + "<br>" + _thisStep.executable + ")" : _thisStep.name;

        stepsMap[_thisStep.name] = true;

        if size(_thisStep.transitions) == 0 do
	        // command to draw a single node
	        flowchart += "\n\t" + initiatingStep;
	    else do
			for j = 0 to size(_thisStep.transitions) - 1 do
	            targetStep = _thisStep.transitions[j]["targetStep"];

	            // transition step name beginning with lowercase 'o' makes mermaid's parser barf
	            // therefore, convert'o' to 'O'
	            if _thisStep.transitions[j]["name"][0] == "o" do
	                name = _thisStep.transitions[j]["name"];
	                maxBound = size(name);
	                transitionName = "O" + name[1 .. maxBound];
	            else do
	                transitionName = _thisStep.transitions[j]["name"];
	            end

	            // add transition command
	            flowchart += "\n\t" + initiatingStep + "--" + transitionName + "-->" + targetStep;

				// add click command
	            flowchart += "\n\t click " + _thisStep.name + " tasks.workflowFlowchartStepClick";
	        end
	    end
    end

    return flowchart;
end

return(json(response));
