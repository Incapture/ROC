//
// Copyright (C) 2011-2013 Incapture Technologies LLC
//
// This is an autogenerated license statement. When copyright notices appear below
// this one that copyright supercedes this statement.
//
// Unless required by applicable law or agreed to in writing, software is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.
//
// Unless explicit permission obtained in writing this software cannot be distributed.
//

// Autogenerated Javascript API for Rapture
//

var http = require('http');
var FormData = require('form-data');
var MD5 = require('./md5.js');
var querystring = require('querystring');
var site = 'localhost';
var port = '8665';
var ctx = {};

exports.getContext = function() {
  return ctx;
}

exports.setConnection = function(s, p) {
  site = s;
  port = p;
}

// THIS SHOULD NOT USE x-www-form-urlencoded
// It should use multipart/form-data

function _genCall(prefix, fnname, params, callback) {
  var realparams = JSON.stringify(params);

  var postData = querystring.stringify({
    FUNCTION: fnname.toUpperCase(),
    PARAMS: realparams
  });
  var form = new FormData();
  form.append('FUNCTION', fnname.toUpperCase());
  form.append('PARAMS', realparams);
  var options = {
    host: site,
    path: '/rapture/' + prefix.toLowerCase(),
    port: port,
    headers: form.getHeaders(),
    method: 'POST'
  }

  if (ctx.hasOwnProperty('session') && ctx.session.hasOwnProperty('contextId')) {
    options.headers['x-rapture'] = ctx.session.contextId;
  }


  var dcallback = function(response) {
    var str = '';
    response.on('data', function(chunk) {
      str += chunk;
    });
    response.on('end', function() {
      callback(str);
    });
  }

  var req = http.request(options, dcallback);
  form.pipe(req);
  //req.end();
};

function _login(password, callback) {
  var hashPassword = MD5(password);
  var combinedBit = hashPassword + ":" + ctx.session.salt;
  var senderPassword = MD5(combinedBit);

  var sendParams = {
    "user": ctx.username,
    "digest": senderPassword,
    "context": ctx.session.contextId,
    "clientApiVersion": {
      "major": 2,
      "minor": 0,
      "micro": 0
    }
  };

  _genCall('login', 'LOGIN', sendParams, callback);
};

exports.login = function(username, password, callback) {
  ctx.username = username;
  var sessionParams = {
    "user": username
  };
  _genCall('login', 'CONTEXT', sessionParams, function(data) {
    var info = JSON.parse(data);
    if (info.inError) {
      callback(info.message, null);
    } else {
      ctx.session = info.response;
      _login(password, function(d) {
        var info = JSON.parse(d);
        if (info.inError) {
          callback(info.response.message, null);
        } else {
          callback(null, info.response);
        }
      });
    }
  });
};

exports.getClientApiVersion = function(callback) {
  callback(null, {
    "major": 2,
    "minor": 0,
    "micro": 0
  });
};

exports.Activity = {};
exports.Bootstrap = {};
exports.Script = {};
exports.Lock = {};
exports.Notification = {};
exports.Table = {};
exports.Index = {};
exports.Admin = {};
exports.IdGen = {};
exports.Entitlement = {};
exports.User = {};
exports.Schedule = {};
exports.Event = {};
exports.Audit = {};
exports.Mailbox = {};
exports.Fields = {};
exports.Blob = {};
exports.Jar = {};
exports.Sheet = {};
exports.Plugin = {};
exports.Pipeline = {};
exports.Async = {};
exports.Sys = {};
exports.Runner = {};
exports.Series = {};
exports.Decision = {};
exports.Repo = {};
exports.Doc = {};
exports.Relationship = {};
exports.Environment = {};
exports.Question = {};
exports.Structured = {};

// Function for createActivity

exports.Activity.createActivity = function(description, message, progress, max,
    callback) {
    var callParams = {};
    callParams.description = description;
    callParams.message = message;
    callParams.progress = progress;
    callParams.max = max;
    var theName = "createActivity";
    _genCall("Activity", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateActivity

  exports.Activity.updateActivity = function(activityId, message, progress, max,
    callback) {
    var callParams = {};
    callParams.activityId = activityId;
    callParams.message = message;
    callParams.progress = progress;
    callParams.max = max;
    var theName = "updateActivity";
    _genCall("Activity", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for finishActivity

  exports.Activity.finishActivity = function(activityId, message, callback) {
    var callParams = {};
    callParams.activityId = activityId;
    callParams.message = message;
    var theName = "finishActivity";
    _genCall("Activity", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for requestAbortActivity

  exports.Activity.requestAbortActivity = function(activityId, message,
    callback) {
    var callParams = {};
    callParams.activityId = activityId;
    callParams.message = message;
    var theName = "requestAbortActivity";
    _genCall("Activity", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for queryByExpiryTime

  exports.Activity.queryByExpiryTime = function(nextBatchId, batchSize,
    lastSeen, callback) {
    var callParams = {};
    callParams.nextBatchId = nextBatchId;
    callParams.batchSize = batchSize;
    callParams.lastSeen = lastSeen;
    var theName = "queryByExpiryTime";
    _genCall("Activity", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getById

  exports.Activity.getById = function(activityId, callback) {
    var callParams = {};
    callParams.activityId = activityId;
    var theName = "getById";
    _genCall("Activity", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setEmphemeralRepo

  exports.Bootstrap.setEmphemeralRepo = function(config, callback) {
    var callParams = {};
    callParams.config = config;
    var theName = "setEmphemeralRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setConfigRepo

  exports.Bootstrap.setConfigRepo = function(config, callback) {
    var callParams = {};
    callParams.config = config;
    var theName = "setConfigRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setSettingsRepo

  exports.Bootstrap.setSettingsRepo = function(config, callback) {
    var callParams = {};
    callParams.config = config;
    var theName = "setSettingsRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for migrateConfigRepo

  exports.Bootstrap.migrateConfigRepo = function(newConfig, callback) {
    var callParams = {};
    callParams.newConfig = newConfig;
    var theName = "migrateConfigRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for migrateEphemeralRepo

  exports.Bootstrap.migrateEphemeralRepo = function(newConfig, callback) {
    var callParams = {};
    callParams.newConfig = newConfig;
    var theName = "migrateEphemeralRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for migrateSettingsRepo

  exports.Bootstrap.migrateSettingsRepo = function(newConfig, callback) {
    var callParams = {};
    callParams.newConfig = newConfig;
    var theName = "migrateSettingsRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getConfigRepo

  exports.Bootstrap.getConfigRepo = function(callback) {
    var callParams = {};
    var theName = "getConfigRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSettingsRepo

  exports.Bootstrap.getSettingsRepo = function(callback) {
    var callParams = {};
    var theName = "getSettingsRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEphemeralRepo

  exports.Bootstrap.getEphemeralRepo = function(callback) {
    var callParams = {};
    var theName = "getEphemeralRepo";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for restartBootstrap

  exports.Bootstrap.restartBootstrap = function(callback) {
    var callParams = {};
    var theName = "restartBootstrap";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addScriptClass

  exports.Bootstrap.addScriptClass = function(keyword, className, callback) {
    var callParams = {};
    callParams.keyword = keyword;
    callParams.className = className;
    var theName = "addScriptClass";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getScriptClasses

  exports.Bootstrap.getScriptClasses = function(callback) {
    var callParams = {};
    var theName = "getScriptClasses";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteScriptClass

  exports.Bootstrap.deleteScriptClass = function(keyword, callback) {
    var callParams = {};
    callParams.keyword = keyword;
    var theName = "deleteScriptClass";
    _genCall("Bootstrap", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createScript

  exports.Script.createScript = function(scriptURI, language, purpose, script,
    callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.language = language;
    callParams.purpose = purpose;
    callParams.script = script;
    var theName = "createScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createScriptLink

  exports.Script.createScriptLink = function(fromScriptURI, toScriptURI,
    callback) {
    var callParams = {};
    callParams.fromScriptURI = fromScriptURI;
    callParams.toScriptURI = toScriptURI;
    var theName = "createScriptLink";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeScriptLink

  exports.Script.removeScriptLink = function(fromScriptURI, callback) {
    var callParams = {};
    callParams.fromScriptURI = fromScriptURI;
    var theName = "removeScriptLink";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setScriptParameters

  exports.Script.setScriptParameters = function(scriptURI, parameters, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.parameters = parameters;
    var theName = "setScriptParameters";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for doesScriptExist

  exports.Script.doesScriptExist = function(scriptURI, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    var theName = "doesScriptExist";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteScript

  exports.Script.deleteScript = function(scriptURI, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    var theName = "deleteScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getScriptNames

  exports.Script.getScriptNames = function(scriptURI, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    var theName = "getScriptNames";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getScript

  exports.Script.getScript = function(scriptURI, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    var theName = "getScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putScript

  exports.Script.putScript = function(scriptURI, script, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.script = script;
    var theName = "putScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putRawScript

  exports.Script.putRawScript = function(scriptURI, content, language, purpose,
    param_types, param_names, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.content = content;
    callParams.language = language;
    callParams.purpose = purpose;
    callParams.param_types = param_types;
    callParams.param_names = param_names;
    var theName = "putRawScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runScript

  exports.Script.runScript = function(scriptURI, parameters, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.parameters = parameters;
    var theName = "runScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runScriptExtended

  exports.Script.runScriptExtended = function(scriptURI, parameters, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.parameters = parameters;
    var theName = "runScriptExtended";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for checkScript

  exports.Script.checkScript = function(scriptURI, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    var theName = "checkScript";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createREPLSession

  exports.Script.createREPLSession = function(callback) {
    var callParams = {};
    var theName = "createREPLSession";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for destroyREPLSession

  exports.Script.destroyREPLSession = function(sessionId, callback) {
    var callParams = {};
    callParams.sessionId = sessionId;
    var theName = "destroyREPLSession";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for evaluateREPL

  exports.Script.evaluateREPL = function(sessionId, line, callback) {
    var callParams = {};
    callParams.sessionId = sessionId;
    callParams.line = line;
    var theName = "evaluateREPL";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for archiveOldREPLSessions

  exports.Script.archiveOldREPLSessions = function(ageInMinutes, callback) {
    var callParams = {};
    callParams.ageInMinutes = ageInMinutes;
    var theName = "archiveOldREPLSessions";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createSnippet

  exports.Script.createSnippet = function(snippetURI, snippet, callback) {
    var callParams = {};
    callParams.snippetURI = snippetURI;
    callParams.snippet = snippet;
    var theName = "createSnippet";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSnippetChildren

  exports.Script.getSnippetChildren = function(prefix, callback) {
    var callParams = {};
    callParams.prefix = prefix;
    var theName = "getSnippetChildren";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSnippet

  exports.Script.deleteSnippet = function(snippetURI, callback) {
    var callParams = {};
    callParams.snippetURI = snippetURI;
    var theName = "deleteSnippet";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSnippet

  exports.Script.getSnippet = function(snippetURI, callback) {
    var callParams = {};
    callParams.snippetURI = snippetURI;
    var theName = "getSnippet";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listScriptsByUriPrefix

  exports.Script.listScriptsByUriPrefix = function(uriPrefix, depth, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    callParams.depth = depth;
    var theName = "listScriptsByUriPrefix";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteScriptsByUriPrefix

  exports.Script.deleteScriptsByUriPrefix = function(uriPrefix, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    var theName = "deleteScriptsByUriPrefix";
    _genCall("Script", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLockManagerConfigs

  exports.Lock.getLockManagerConfigs = function(managerUri, callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    var theName = "getLockManagerConfigs";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createLockManager

  exports.Lock.createLockManager = function(managerUri, config, pathPosition,
    callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    callParams.config = config;
    callParams.pathPosition = pathPosition;
    var theName = "createLockManager";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for lockManagerExists

  exports.Lock.lockManagerExists = function(managerUri, callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    var theName = "lockManagerExists";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLockManagerConfig

  exports.Lock.getLockManagerConfig = function(managerUri, callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    var theName = "getLockManagerConfig";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteLockManager

  exports.Lock.deleteLockManager = function(managerUri, callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    var theName = "deleteLockManager";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for acquireLock

  exports.Lock.acquireLock = function(managerUri, lockName, secondsToWait,
    secondsToKeep, callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    callParams.lockName = lockName;
    callParams.secondsToWait = secondsToWait;
    callParams.secondsToKeep = secondsToKeep;
    var theName = "acquireLock";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for releaseLock

  exports.Lock.releaseLock = function(managerUri, lockName, lockHandle,
    callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    callParams.lockName = lockName;
    callParams.lockHandle = lockHandle;
    var theName = "releaseLock";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for forceReleaseLock

  exports.Lock.forceReleaseLock = function(managerUri, lockName, callback) {
    var callParams = {};
    callParams.managerUri = managerUri;
    callParams.lockName = lockName;
    var theName = "forceReleaseLock";
    _genCall("Lock", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getNotificationManagerConfigs

  exports.Notification.getNotificationManagerConfigs = function(callback) {
    var callParams = {};
    var theName = "getNotificationManagerConfigs";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listNotificationsByUriPrefix

  exports.Notification.listNotificationsByUriPrefix = function(uriPrefix,
    callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    var theName = "listNotificationsByUriPrefix";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findNotificationManagerConfigsByPurpose

  exports.Notification.findNotificationManagerConfigsByPurpose = function(
    purpose, callback) {
    var callParams = {};
    callParams.purpose = purpose;
    var theName = "findNotificationManagerConfigsByPurpose";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createNotificationManager

  exports.Notification.createNotificationManager = function(
    notificationManagerUri, config, purpose, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    callParams.config = config;
    callParams.purpose = purpose;
    var theName = "createNotificationManager";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for notificationManagerExists

  exports.Notification.notificationManagerExists = function(
    notificationManagerUri, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    var theName = "notificationManagerExists";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getNotificationManagerConfig

  exports.Notification.getNotificationManagerConfig = function(
    notificationManagerUri, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    var theName = "getNotificationManagerConfig";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteNotificationManager

  exports.Notification.deleteNotificationManager = function(
    notificationManagerUri, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    var theName = "deleteNotificationManager";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLatestNotificationEpoch

  exports.Notification.getLatestNotificationEpoch = function(
    notificationManagerUri, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    var theName = "getLatestNotificationEpoch";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for publishNotification

  exports.Notification.publishNotification = function(notificationManagerUri,
    referenceId, content, contentType, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    callParams.referenceId = referenceId;
    callParams.content = content;
    callParams.contentType = contentType;
    var theName = "publishNotification";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findNotificationsAfterEpoch

  exports.Notification.findNotificationsAfterEpoch = function(
    notificationManagerUri, epoch, callback) {
    var callParams = {};
    callParams.notificationManagerUri = notificationManagerUri;
    callParams.epoch = epoch;
    var theName = "findNotificationsAfterEpoch";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getNotification

  exports.Notification.getNotification = function(notificationUri, id, callback) {
    var callParams = {};
    callParams.notificationUri = notificationUri;
    callParams.id = id;
    var theName = "getNotification";
    _genCall("Notification", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createTable

  exports.Table.createTable = function(indexURI, config, callback) {
    var callParams = {};
    callParams.indexURI = indexURI;
    callParams.config = config;
    var theName = "createTable";
    _genCall("Table", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getTablesForAuthority

  exports.Table.getTablesForAuthority = function(authority, callback) {
    var callParams = {};
    callParams.authority = authority;
    var theName = "getTablesForAuthority";
    _genCall("Table", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getTable

  exports.Table.getTable = function(indexURI, callback) {
    var callParams = {};
    callParams.indexURI = indexURI;
    var theName = "getTable";
    _genCall("Table", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteTable

  exports.Table.deleteTable = function(indexURI, callback) {
    var callParams = {};
    callParams.indexURI = indexURI;
    var theName = "deleteTable";
    _genCall("Table", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for queryTable

  exports.Table.queryTable = function(indexURI, query, callback) {
    var callParams = {};
    callParams.indexURI = indexURI;
    callParams.query = query;
    var theName = "queryTable";
    _genCall("Table", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createIndex

  exports.Index.createIndex = function(indexUri, config, callback) {
    var callParams = {};
    callParams.indexUri = indexUri;
    callParams.config = config;
    var theName = "createIndex";
    _genCall("Index", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getIndex

  exports.Index.getIndex = function(indexUri, callback) {
    var callParams = {};
    callParams.indexUri = indexUri;
    var theName = "getIndex";
    _genCall("Index", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteIndex

  exports.Index.deleteIndex = function(indexUri, callback) {
    var callParams = {};
    callParams.indexUri = indexUri;
    var theName = "deleteIndex";
    _genCall("Index", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findIndex

  exports.Index.findIndex = function(indexUri, query, callback) {
    var callParams = {};
    callParams.indexUri = indexUri;
    callParams.query = query;
    var theName = "findIndex";
    _genCall("Index", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSystemProperties

  exports.Admin.getSystemProperties = function(keys, callback) {
    var callParams = {};
    callParams.keys = keys;
    var theName = "getSystemProperties";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRepoConfig

  exports.Admin.getRepoConfig = function(callback) {
    var callParams = {};
    var theName = "getRepoConfig";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSessionsForUser

  exports.Admin.getSessionsForUser = function(user, callback) {
    var callParams = {};
    callParams.user = user;
    var theName = "getSessionsForUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getTags

  exports.Admin.getTags = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "getTags";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteUser

  exports.Admin.deleteUser = function(userName, callback) {
    var callParams = {};
    callParams.userName = userName;
    var theName = "deleteUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for destroyUser

  exports.Admin.destroyUser = function(userName, callback) {
    var callParams = {};
    callParams.userName = userName;
    var theName = "destroyUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for restoreUser

  exports.Admin.restoreUser = function(userName, callback) {
    var callParams = {};
    callParams.userName = userName;
    var theName = "restoreUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addUser

  exports.Admin.addUser = function(userName, description, hashPassword, email,
    callback) {
    var callParams = {};
    callParams.userName = userName;
    callParams.description = description;
    callParams.hashPassword = hashPassword;
    callParams.email = email;
    var theName = "addUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for doesUserExist

  exports.Admin.doesUserExist = function(userName, callback) {
    var callParams = {};
    callParams.userName = userName;
    var theName = "doesUserExist";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getUser

  exports.Admin.getUser = function(userName, callback) {
    var callParams = {};
    callParams.userName = userName;
    var theName = "getUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for generateApiUser

  exports.Admin.generateApiUser = function(prefix, description, callback) {
    var callParams = {};
    callParams.prefix = prefix;
    callParams.description = description;
    var theName = "generateApiUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for resetUserPassword

  exports.Admin.resetUserPassword = function(userName, newHashPassword,
    callback) {
    var callParams = {};
    callParams.userName = userName;
    callParams.newHashPassword = newHashPassword;
    var theName = "resetUserPassword";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createPasswordResetToken

  exports.Admin.createPasswordResetToken = function(username, callback) {
    var callParams = {};
    callParams.username = username;
    var theName = "createPasswordResetToken";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for cancelPasswordResetToken

  exports.Admin.cancelPasswordResetToken = function(username, callback) {
    var callParams = {};
    callParams.username = username;
    var theName = "cancelPasswordResetToken";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateUserEmail

  exports.Admin.updateUserEmail = function(userName, newEmail, callback) {
    var callParams = {};
    callParams.userName = userName;
    callParams.newEmail = newEmail;
    var theName = "updateUserEmail";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRemotes

  exports.Admin.getRemotes = function(callback) {
    var callParams = {};
    var theName = "getRemotes";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addRemote

  exports.Admin.addRemote = function(name, description, url, apiKey, optP,
    callback) {
    var callParams = {};
    callParams.name = name;
    callParams.description = description;
    callParams.url = url;
    callParams.apiKey = apiKey;
    callParams.optP = optP;
    var theName = "addRemote";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteRemote

  exports.Admin.deleteRemote = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "deleteRemote";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateRemoteApiKey

  exports.Admin.updateRemoteApiKey = function(name, apiKey, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.apiKey = apiKey;
    var theName = "updateRemoteApiKey";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setRemote

  exports.Admin.setRemote = function(raptureURI, remote, remoteURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.remote = remote;
    callParams.remoteURI = remoteURI;
    var theName = "setRemote";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for clearRemote

  exports.Admin.clearRemote = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "clearRemote";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for pullRemote

  exports.Admin.pullRemote = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "pullRemote";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addTemplate

  exports.Admin.addTemplate = function(name, template, overwrite, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.template = template;
    callParams.overwrite = overwrite;
    var theName = "addTemplate";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runTemplate

  exports.Admin.runTemplate = function(name, parameters, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.parameters = parameters;
    var theName = "runTemplate";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getTemplate

  exports.Admin.getTemplate = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "getTemplate";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for copyDocumentRepo

  exports.Admin.copyDocumentRepo = function(srcAuthority, targAuthority, wipe,
    callback) {
    var callParams = {};
    callParams.srcAuthority = srcAuthority;
    callParams.targAuthority = targAuthority;
    callParams.wipe = wipe;
    var theName = "copyDocumentRepo";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addIPToWhiteList

  exports.Admin.addIPToWhiteList = function(ipAddress, callback) {
    var callParams = {};
    callParams.ipAddress = ipAddress;
    var theName = "addIPToWhiteList";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeIPFromWhiteList

  exports.Admin.removeIPFromWhiteList = function(ipAddress, callback) {
    var callParams = {};
    callParams.ipAddress = ipAddress;
    var theName = "removeIPFromWhiteList";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getIPWhiteList

  exports.Admin.getIPWhiteList = function(callback) {
    var callParams = {};
    var theName = "getIPWhiteList";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runBatchScript

  exports.Admin.runBatchScript = function(script, callback) {
    var callParams = {};
    callParams.script = script;
    var theName = "runBatchScript";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllUsers

  exports.Admin.getAllUsers = function(callback) {
    var callParams = {};
    var theName = "getAllUsers";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for initiateTypeConversion

  exports.Admin.initiateTypeConversion = function(raptureURI, newConfig,
    versionsToKeep, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.newConfig = newConfig;
    callParams.versionsToKeep = versionsToKeep;
    var theName = "initiateTypeConversion";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putArchiveConfig

  exports.Admin.putArchiveConfig = function(raptureURI, config, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.config = config;
    var theName = "putArchiveConfig";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getArchiveConfig

  exports.Admin.getArchiveConfig = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "getArchiveConfig";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteArchiveConfig

  exports.Admin.deleteArchiveConfig = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "deleteArchiveConfig";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for ping

  exports.Admin.ping = function(callback) {
    var callParams = {};
    var theName = "ping";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addMetadata

  exports.Admin.addMetadata = function(values, overwrite, callback) {
    var callParams = {};
    callParams.values = values;
    callParams.overwrite = overwrite;
    var theName = "addMetadata";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setMOTD

  exports.Admin.setMOTD = function(message, callback) {
    var callParams = {};
    callParams.message = message;
    var theName = "setMOTD";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getMOTD

  exports.Admin.getMOTD = function(callback) {
    var callParams = {};
    var theName = "getMOTD";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setEnvironmentName

  exports.Admin.setEnvironmentName = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "setEnvironmentName";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setEnvironmentProperties

  exports.Admin.setEnvironmentProperties = function(properties, callback) {
    var callParams = {};
    callParams.properties = properties;
    var theName = "setEnvironmentProperties";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEnvironmentName

  exports.Admin.getEnvironmentName = function(callback) {
    var callParams = {};
    var theName = "getEnvironmentName";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEnvironmentProperties

  exports.Admin.getEnvironmentProperties = function(callback) {
    var callParams = {};
    var theName = "getEnvironmentProperties";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for encode

  exports.Admin.encode = function(toEncode, callback) {
    var callParams = {};
    callParams.toEncode = toEncode;
    var theName = "encode";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createURI

  exports.Admin.createURI = function(path, leaf, callback) {
    var callParams = {};
    callParams.path = path;
    callParams.leaf = leaf;
    var theName = "createURI";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createMultipartURI

  exports.Admin.createMultipartURI = function(elements, callback) {
    var callParams = {};
    callParams.elements = elements;
    var theName = "createMultipartURI";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for decode

  exports.Admin.decode = function(encoded, callback) {
    var callParams = {};
    callParams.encoded = encoded;
    var theName = "decode";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findGroupNamesByUser

  exports.Admin.findGroupNamesByUser = function(username, callback) {
    var callParams = {};
    callParams.username = username;
    var theName = "findGroupNamesByUser";
    _genCall("Admin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getIdGenConfigs

  exports.IdGen.getIdGenConfigs = function(authority, callback) {
    var callParams = {};
    callParams.authority = authority;
    var theName = "getIdGenConfigs";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getIdGenConfig

  exports.IdGen.getIdGenConfig = function(idGenUri, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    var theName = "getIdGenConfig";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createIdGen

  exports.IdGen.createIdGen = function(idGenUri, config, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    callParams.config = config;
    var theName = "createIdGen";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for idGenExists

  exports.IdGen.idGenExists = function(idGenUri, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    var theName = "idGenExists";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteIdGen

  exports.IdGen.deleteIdGen = function(idGenUri, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    var theName = "deleteIdGen";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setIdGen

  exports.IdGen.setIdGen = function(idGenUri, count, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    callParams.count = count;
    var theName = "setIdGen";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for next

  exports.IdGen.next = function(idGenUri, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    var theName = "next";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for nextIds

  exports.IdGen.nextIds = function(idGenUri, num, callback) {
    var callParams = {};
    callParams.idGenUri = idGenUri;
    callParams.num = num;
    var theName = "nextIds";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setupDefaultIdGens

  exports.IdGen.setupDefaultIdGens = function(force, callback) {
    var callParams = {};
    callParams.force = force;
    var theName = "setupDefaultIdGens";
    _genCall("IdGen", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntitlements

  exports.Entitlement.getEntitlements = function(callback) {
    var callParams = {};
    var theName = "getEntitlements";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntitlement

  exports.Entitlement.getEntitlement = function(entitlementName, callback) {
    var callParams = {};
    callParams.entitlementName = entitlementName;
    var theName = "getEntitlement";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntitlementByAddress

  exports.Entitlement.getEntitlementByAddress = function(entitlementURI,
    callback) {
    var callParams = {};
    callParams.entitlementURI = entitlementURI;
    var theName = "getEntitlementByAddress";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntitlementGroup

  exports.Entitlement.getEntitlementGroup = function(groupName, callback) {
    var callParams = {};
    callParams.groupName = groupName;
    var theName = "getEntitlementGroup";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntitlementGroupByAddress

  exports.Entitlement.getEntitlementGroupByAddress = function(groupURI,
    callback) {
    var callParams = {};
    callParams.groupURI = groupURI;
    var theName = "getEntitlementGroupByAddress";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntitlementGroups

  exports.Entitlement.getEntitlementGroups = function(callback) {
    var callParams = {};
    var theName = "getEntitlementGroups";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addEntitlement

  exports.Entitlement.addEntitlement = function(entitlementName, initialGroup,
    callback) {
    var callParams = {};
    callParams.entitlementName = entitlementName;
    callParams.initialGroup = initialGroup;
    var theName = "addEntitlement";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addGroupToEntitlement

  exports.Entitlement.addGroupToEntitlement = function(entitlementName,
    groupName, callback) {
    var callParams = {};
    callParams.entitlementName = entitlementName;
    callParams.groupName = groupName;
    var theName = "addGroupToEntitlement";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeGroupFromEntitlement

  exports.Entitlement.removeGroupFromEntitlement = function(entitlementName,
    groupName, callback) {
    var callParams = {};
    callParams.entitlementName = entitlementName;
    callParams.groupName = groupName;
    var theName = "removeGroupFromEntitlement";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEntitlement

  exports.Entitlement.deleteEntitlement = function(entitlementName, callback) {
    var callParams = {};
    callParams.entitlementName = entitlementName;
    var theName = "deleteEntitlement";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEntitlementGroup

  exports.Entitlement.deleteEntitlementGroup = function(groupName, callback) {
    var callParams = {};
    callParams.groupName = groupName;
    var theName = "deleteEntitlementGroup";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addEntitlementGroup

  exports.Entitlement.addEntitlementGroup = function(groupName, callback) {
    var callParams = {};
    callParams.groupName = groupName;
    var theName = "addEntitlementGroup";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addUserToEntitlementGroup

  exports.Entitlement.addUserToEntitlementGroup = function(groupName, userName,
    callback) {
    var callParams = {};
    callParams.groupName = groupName;
    callParams.userName = userName;
    var theName = "addUserToEntitlementGroup";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeUserFromEntitlementGroup

  exports.Entitlement.removeUserFromEntitlementGroup = function(groupName,
    userName, callback) {
    var callParams = {};
    callParams.groupName = groupName;
    callParams.userName = userName;
    var theName = "removeUserFromEntitlementGroup";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findEntitlementsByUser

  exports.Entitlement.findEntitlementsByUser = function(username, callback) {
    var callParams = {};
    callParams.username = username;
    var theName = "findEntitlementsByUser";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findEntitlementsByGroup

  exports.Entitlement.findEntitlementsByGroup = function(groupname, callback) {
    var callParams = {};
    callParams.groupname = groupname;
    var theName = "findEntitlementsByGroup";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findEntitlementsBySelf

  exports.Entitlement.findEntitlementsBySelf = function(callback) {
    var callParams = {};
    var theName = "findEntitlementsBySelf";
    _genCall("Entitlement", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWhoAmI

  exports.User.getWhoAmI = function(callback) {
    var callParams = {};
    var theName = "getWhoAmI";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for logoutUser

  exports.User.logoutUser = function(callback) {
    var callParams = {};
    var theName = "logoutUser";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for storePreference

  exports.User.storePreference = function(category, name, content, callback) {
    var callParams = {};
    callParams.category = category;
    callParams.name = name;
    callParams.content = content;
    var theName = "storePreference";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPreference

  exports.User.getPreference = function(category, name, callback) {
    var callParams = {};
    callParams.category = category;
    callParams.name = name;
    var theName = "getPreference";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removePreference

  exports.User.removePreference = function(category, name, callback) {
    var callParams = {};
    callParams.category = category;
    callParams.name = name;
    var theName = "removePreference";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPreferenceCategories

  exports.User.getPreferenceCategories = function(callback) {
    var callParams = {};
    var theName = "getPreferenceCategories";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPreferencesInCategory

  exports.User.getPreferencesInCategory = function(category, callback) {
    var callParams = {};
    callParams.category = category;
    var theName = "getPreferencesInCategory";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateMyDescription

  exports.User.updateMyDescription = function(description, callback) {
    var callParams = {};
    callParams.description = description;
    var theName = "updateMyDescription";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for changeMyPassword

  exports.User.changeMyPassword = function(oldHashPassword, newHashPassword,
    callback) {
    var callParams = {};
    callParams.oldHashPassword = oldHashPassword;
    callParams.newHashPassword = newHashPassword;
    var theName = "changeMyPassword";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for changeMyEmail

  exports.User.changeMyEmail = function(newAddress, callback) {
    var callParams = {};
    callParams.newAddress = newAddress;
    var theName = "changeMyEmail";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getServerApiVersion

  exports.User.getServerApiVersion = function(callback) {
    var callParams = {};
    var theName = "getServerApiVersion";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runFilterCubeView

  exports.User.runFilterCubeView = function(typeURI, scriptURI, filterParams,
    groupFields, columnFields, callback) {
    var callParams = {};
    callParams.typeURI = typeURI;
    callParams.scriptURI = scriptURI;
    callParams.filterParams = filterParams;
    callParams.groupFields = groupFields;
    callParams.columnFields = columnFields;
    var theName = "runFilterCubeView";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runNativeQuery

  exports.User.runNativeQuery = function(typeURI, repoType, queryParams,
    callback) {
    var callParams = {};
    callParams.typeURI = typeURI;
    callParams.repoType = repoType;
    callParams.queryParams = queryParams;
    var theName = "runNativeQuery";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runNativeFilterCubeView

  exports.User.runNativeFilterCubeView = function(typeURI, repoType,
    queryParams, groupFields, columnFields, callback) {
    var callParams = {};
    callParams.typeURI = typeURI;
    callParams.repoType = repoType;
    callParams.queryParams = queryParams;
    callParams.groupFields = groupFields;
    callParams.columnFields = columnFields;
    var theName = "runNativeFilterCubeView";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for isPermitted

  exports.User.isPermitted = function(apiCall, callParam, callback) {
    var callParams = {};
    callParams.apiCall = apiCall;
    callParams.callParam = callParam;
    var theName = "isPermitted";
    _genCall("User", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createJob

  exports.Schedule.createJob = function(jobURI, description, scriptURI,
    cronExpression, timeZone, jobParams, autoActivate, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.description = description;
    callParams.scriptURI = scriptURI;
    callParams.cronExpression = cronExpression;
    callParams.timeZone = timeZone;
    callParams.jobParams = jobParams;
    callParams.autoActivate = autoActivate;
    var theName = "createJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createWorkflowJob

  exports.Schedule.createWorkflowJob = function(jobURI, description,
    workflowURI, cronExpression, timeZone, jobParams, autoActivate,
    maxRuntimeMinutes, appStatusNamePattern, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.description = description;
    callParams.workflowURI = workflowURI;
    callParams.cronExpression = cronExpression;
    callParams.timeZone = timeZone;
    callParams.jobParams = jobParams;
    callParams.autoActivate = autoActivate;
    callParams.maxRuntimeMinutes = maxRuntimeMinutes;
    callParams.appStatusNamePattern = appStatusNamePattern;
    var theName = "createWorkflowJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for activateJob

  exports.Schedule.activateJob = function(jobURI, extraParams, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.extraParams = extraParams;
    var theName = "activateJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deactivateJob

  exports.Schedule.deactivateJob = function(jobURI, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    var theName = "deactivateJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for retrieveJob

  exports.Schedule.retrieveJob = function(jobURI, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    var theName = "retrieveJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for retrieveJobs

  exports.Schedule.retrieveJobs = function(uriPrefix, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    var theName = "retrieveJobs";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runJobNow

  exports.Schedule.runJobNow = function(jobURI, extraParams, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.extraParams = extraParams;
    var theName = "runJobNow";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for resetJob

  exports.Schedule.resetJob = function(jobURI, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    var theName = "resetJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for retrieveJobExec

  exports.Schedule.retrieveJobExec = function(jobURI, execTime, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.execTime = execTime;
    var theName = "retrieveJobExec";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteJob

  exports.Schedule.deleteJob = function(jobURI, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    var theName = "deleteJob";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getJobs

  exports.Schedule.getJobs = function(callback) {
    var callParams = {};
    var theName = "getJobs";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getUpcomingJobs

  exports.Schedule.getUpcomingJobs = function(callback) {
    var callParams = {};
    var theName = "getUpcomingJobs";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkflowExecsStatus

  exports.Schedule.getWorkflowExecsStatus = function(callback) {
    var callParams = {};
    var theName = "getWorkflowExecsStatus";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for ackJobError

  exports.Schedule.ackJobError = function(jobURI, execTime, jobErrorType,
    callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.execTime = execTime;
    callParams.jobErrorType = jobErrorType;
    var theName = "ackJobError";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getNextExec

  exports.Schedule.getNextExec = function(jobURI, callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    var theName = "getNextExec";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getJobExecs

  exports.Schedule.getJobExecs = function(jobURI, start, count, reversed,
    callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.start = start;
    callParams.count = count;
    callParams.reversed = reversed;
    var theName = "getJobExecs";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for batchGetJobExecs

  exports.Schedule.batchGetJobExecs = function(jobURI, start, count, reversed,
    callback) {
    var callParams = {};
    callParams.jobURI = jobURI;
    callParams.start = start;
    callParams.count = count;
    callParams.reversed = reversed;
    var theName = "batchGetJobExecs";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for isJobReadyToRun

  exports.Schedule.isJobReadyToRun = function(toJobURI, callback) {
    var callParams = {};
    callParams.toJobURI = toJobURI;
    var theName = "isJobReadyToRun";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCurrentWeekTimeRecords

  exports.Schedule.getCurrentWeekTimeRecords = function(weekOffsetfromNow,
    callback) {
    var callParams = {};
    callParams.weekOffsetfromNow = weekOffsetfromNow;
    var theName = "getCurrentWeekTimeRecords";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCurrentDayJobs

  exports.Schedule.getCurrentDayJobs = function(callback) {
    var callParams = {};
    var theName = "getCurrentDayJobs";
    _genCall("Schedule", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEvent

  exports.Event.getEvent = function(eventUri, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    var theName = "getEvent";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putEvent

  exports.Event.putEvent = function(event, callback) {
    var callParams = {};
    callParams.event = event;
    var theName = "putEvent";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEvent

  exports.Event.deleteEvent = function(eventUri, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    var theName = "deleteEvent";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listEventsByUriPrefix

  exports.Event.listEventsByUriPrefix = function(eventUriPrefix, callback) {
    var callParams = {};
    callParams.eventUriPrefix = eventUriPrefix;
    var theName = "listEventsByUriPrefix";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addEventScript

  exports.Event.addEventScript = function(eventUri, scriptUri, performOnce,
    callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.scriptUri = scriptUri;
    callParams.performOnce = performOnce;
    var theName = "addEventScript";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEventScript

  exports.Event.deleteEventScript = function(eventUri, scriptUri, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.scriptUri = scriptUri;
    var theName = "deleteEventScript";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addEventMessage

  exports.Event.addEventMessage = function(eventUri, name, pipeline, params,
    callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.name = name;
    callParams.pipeline = pipeline;
    callParams.params = params;
    var theName = "addEventMessage";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEventMessage

  exports.Event.deleteEventMessage = function(eventUri, name, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.name = name;
    var theName = "deleteEventMessage";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addEventNotification

  exports.Event.addEventNotification = function(eventUri, name, notification,
    params, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.name = name;
    callParams.notification = notification;
    callParams.params = params;
    var theName = "addEventNotification";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEventNotification

  exports.Event.deleteEventNotification = function(eventUri, name, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.name = name;
    var theName = "deleteEventNotification";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addEventWorkflow

  exports.Event.addEventWorkflow = function(eventUri, name, workflowUri, params,
    callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.name = name;
    callParams.workflowUri = workflowUri;
    callParams.params = params;
    var theName = "addEventWorkflow";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEventWorkflow

  exports.Event.deleteEventWorkflow = function(eventUri, name, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.name = name;
    var theName = "deleteEventWorkflow";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runEvent

  exports.Event.runEvent = function(eventUri, associatedUri, eventContext,
    callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.associatedUri = associatedUri;
    callParams.eventContext = eventContext;
    var theName = "runEvent";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runEventWithContext

  exports.Event.runEventWithContext = function(eventUri, associatedUri,
    eventContextMap, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    callParams.associatedUri = associatedUri;
    callParams.eventContextMap = eventContextMap;
    var theName = "runEventWithContext";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for eventExists

  exports.Event.eventExists = function(eventUri, callback) {
    var callParams = {};
    callParams.eventUri = eventUri;
    var theName = "eventExists";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteEventsByUriPrefix

  exports.Event.deleteEventsByUriPrefix = function(uriPrefix, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    var theName = "deleteEventsByUriPrefix";
    _genCall("Event", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setup

  exports.Audit.setup = function(force, callback) {
    var callParams = {};
    callParams.force = force;
    var theName = "setup";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createAuditLog

  exports.Audit.createAuditLog = function(name, config, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.config = config;
    var theName = "createAuditLog";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for doesAuditLogExist

  exports.Audit.doesAuditLogExist = function(logURI, callback) {
    var callParams = {};
    callParams.logURI = logURI;
    var theName = "doesAuditLogExist";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getChildren

  exports.Audit.getChildren = function(prefix, callback) {
    var callParams = {};
    callParams.prefix = prefix;
    var theName = "getChildren";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteAuditLog

  exports.Audit.deleteAuditLog = function(logURI, callback) {
    var callParams = {};
    callParams.logURI = logURI;
    var theName = "deleteAuditLog";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAuditLog

  exports.Audit.getAuditLog = function(logURI, callback) {
    var callParams = {};
    callParams.logURI = logURI;
    var theName = "getAuditLog";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for writeAuditEntry

  exports.Audit.writeAuditEntry = function(logURI, category, level, message,
    callback) {
    var callParams = {};
    callParams.logURI = logURI;
    callParams.category = category;
    callParams.level = level;
    callParams.message = message;
    var theName = "writeAuditEntry";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for writeAuditEntryData

  exports.Audit.writeAuditEntryData = function(logURI, category, level, message,
    data, callback) {
    var callParams = {};
    callParams.logURI = logURI;
    callParams.category = category;
    callParams.level = level;
    callParams.message = message;
    callParams.data = data;
    var theName = "writeAuditEntryData";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRecentLogEntries

  exports.Audit.getRecentLogEntries = function(logURI, count, callback) {
    var callParams = {};
    callParams.logURI = logURI;
    callParams.count = count;
    var theName = "getRecentLogEntries";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getEntriesSince

  exports.Audit.getEntriesSince = function(logURI, when, callback) {
    var callParams = {};
    callParams.logURI = logURI;
    callParams.when = when;
    var theName = "getEntriesSince";
    _genCall("Audit", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putMessage

  exports.Mailbox.putMessage = function(messageUri, content, callback) {
    var callParams = {};
    callParams.messageUri = messageUri;
    callParams.content = content;
    var theName = "putMessage";
    _genCall("Mailbox", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for moveMessage

  exports.Mailbox.moveMessage = function(messageUri, newMessageUri, callback) {
    var callParams = {};
    callParams.messageUri = messageUri;
    callParams.newMessageUri = newMessageUri;
    var theName = "moveMessage";
    _genCall("Mailbox", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createMailboxRepo

  exports.Mailbox.createMailboxRepo = function(mailboxConfig, idGenConfig,
    callback) {
    var callParams = {};
    callParams.mailboxConfig = mailboxConfig;
    callParams.idGenConfig = idGenConfig;
    var theName = "createMailboxRepo";
    _genCall("Mailbox", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getMessages

  exports.Mailbox.getMessages = function(mailboxUri, callback) {
    var callParams = {};
    callParams.mailboxUri = mailboxUri;
    var theName = "getMessages";
    _genCall("Mailbox", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listFieldsByUriPrefix

  exports.Fields.listFieldsByUriPrefix = function(authority, depth, callback) {
    var callParams = {};
    callParams.authority = authority;
    callParams.depth = depth;
    var theName = "listFieldsByUriPrefix";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getField

  exports.Fields.getField = function(fieldUri, callback) {
    var callParams = {};
    callParams.fieldUri = fieldUri;
    var theName = "getField";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putField

  exports.Fields.putField = function(field, callback) {
    var callParams = {};
    callParams.field = field;
    var theName = "putField";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for fieldExists

  exports.Fields.fieldExists = function(fieldUri, callback) {
    var callParams = {};
    callParams.fieldUri = fieldUri;
    var theName = "fieldExists";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteField

  exports.Fields.deleteField = function(fieldUri, callback) {
    var callParams = {};
    callParams.fieldUri = fieldUri;
    var theName = "deleteField";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocumentFields

  exports.Fields.getDocumentFields = function(docURI, fields, callback) {
    var callParams = {};
    callParams.docURI = docURI;
    callParams.fields = fields;
    var theName = "getDocumentFields";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putDocumentAndGetDocumentFields

  exports.Fields.putDocumentAndGetDocumentFields = function(docURI, content,
    fields, callback) {
    var callParams = {};
    callParams.docURI = docURI;
    callParams.content = content;
    callParams.fields = fields;
    var theName = "putDocumentAndGetDocumentFields";
    _genCall("Fields", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createBlobRepo

  exports.Blob.createBlobRepo = function(blobRepoUri, config, metaConfig,
    callback) {
    var callParams = {};
    callParams.blobRepoUri = blobRepoUri;
    callParams.config = config;
    callParams.metaConfig = metaConfig;
    var theName = "createBlobRepo";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getBlobRepoConfig

  exports.Blob.getBlobRepoConfig = function(blobRepoUri, callback) {
    var callParams = {};
    callParams.blobRepoUri = blobRepoUri;
    var theName = "getBlobRepoConfig";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getBlobRepoConfigs

  exports.Blob.getBlobRepoConfigs = function(callback) {
    var callParams = {};
    var theName = "getBlobRepoConfigs";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteBlobRepo

  exports.Blob.deleteBlobRepo = function(repoUri, callback) {
    var callParams = {};
    callParams.repoUri = repoUri;
    var theName = "deleteBlobRepo";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for blobRepoExists

  exports.Blob.blobRepoExists = function(repoUri, callback) {
    var callParams = {};
    callParams.repoUri = repoUri;
    var theName = "blobRepoExists";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for blobExists

  exports.Blob.blobExists = function(blobUri, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    var theName = "blobExists";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addBlobContent

  exports.Blob.addBlobContent = function(blobUri, content, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    callParams.content = content;
    var theName = "addBlobContent";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putBlob

  exports.Blob.putBlob = function(blobUri, content, contentType, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    callParams.content = content;
    callParams.contentType = contentType;
    var theName = "putBlob";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getBlob

  exports.Blob.getBlob = function(blobUri, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    var theName = "getBlob";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteBlob

  exports.Blob.deleteBlob = function(blobUri, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    var theName = "deleteBlob";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getBlobSize

  exports.Blob.getBlobSize = function(blobUri, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    var theName = "getBlobSize";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getBlobMetaData

  exports.Blob.getBlobMetaData = function(blobUri, callback) {
    var callParams = {};
    callParams.blobUri = blobUri;
    var theName = "getBlobMetaData";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listBlobsByUriPrefix

  exports.Blob.listBlobsByUriPrefix = function(uriPrefix, depth, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    callParams.depth = depth;
    var theName = "listBlobsByUriPrefix";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteBlobsByUriPrefix

  exports.Blob.deleteBlobsByUriPrefix = function(uriPrefix, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    var theName = "deleteBlobsByUriPrefix";
    _genCall("Blob", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for jarExists

  exports.Jar.jarExists = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "jarExists";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putJar

  exports.Jar.putJar = function(jarUri, jarContent, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    callParams.jarContent = jarContent;
    var theName = "putJar";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getJar

  exports.Jar.getJar = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "getJar";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteJar

  exports.Jar.deleteJar = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "deleteJar";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getJarSize

  exports.Jar.getJarSize = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "getJarSize";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getJarMetaData

  exports.Jar.getJarMetaData = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "getJarMetaData";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listJarsByUriPrefix

  exports.Jar.listJarsByUriPrefix = function(uriPrefix, depth, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    callParams.depth = depth;
    var theName = "listJarsByUriPrefix";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for jarIsEnabled

  exports.Jar.jarIsEnabled = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "jarIsEnabled";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for enableJar

  exports.Jar.enableJar = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "enableJar";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for disableJar

  exports.Jar.disableJar = function(jarUri, callback) {
    var callParams = {};
    callParams.jarUri = jarUri;
    var theName = "disableJar";
    _genCall("Jar", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createSheetRepo

  exports.Sheet.createSheetRepo = function(sheetURI, config, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.config = config;
    var theName = "createSheetRepo";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetRepoConfig

  exports.Sheet.getSheetRepoConfig = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "getSheetRepoConfig";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetRepoConfigs

  exports.Sheet.getSheetRepoConfigs = function(callback) {
    var callParams = {};
    var theName = "getSheetRepoConfigs";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createSheet

  exports.Sheet.createSheet = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "createSheet";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheet

  exports.Sheet.deleteSheet = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "deleteSheet";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for sheetExists

  exports.Sheet.sheetExists = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "sheetExists";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetRepo

  exports.Sheet.deleteSheetRepo = function(repoURI, callback) {
    var callParams = {};
    callParams.repoURI = repoURI;
    var theName = "deleteSheetRepo";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for sheetRepoExists

  exports.Sheet.sheetRepoExists = function(repoURI, callback) {
    var callParams = {};
    callParams.repoURI = repoURI;
    var theName = "sheetRepoExists";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listSheetsByUriPrefix

  exports.Sheet.listSheetsByUriPrefix = function(uriPrefix, depth, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    callParams.depth = depth;
    var theName = "listSheetsByUriPrefix";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetsByUriPrefix

  exports.Sheet.deleteSheetsByUriPrefix = function(uriPrefix, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    var theName = "deleteSheetsByUriPrefix";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setSheetCell

  exports.Sheet.setSheetCell = function(sheetURI, row, column, value, tabId,
    callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.row = row;
    callParams.column = column;
    callParams.value = value;
    callParams.tabId = tabId;
    var theName = "setSheetCell";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setBlock

  exports.Sheet.setBlock = function(sheetURI, startRow, startColumn, values,
    height, width, tabId, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.startRow = startRow;
    callParams.startColumn = startColumn;
    callParams.values = values;
    callParams.height = height;
    callParams.width = width;
    callParams.tabId = tabId;
    var theName = "setBlock";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetCell

  exports.Sheet.getSheetCell = function(sheetURI, row, column, tabId, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.row = row;
    callParams.column = column;
    callParams.tabId = tabId;
    var theName = "getSheetCell";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for findCellsByEpoch

  exports.Sheet.findCellsByEpoch = function(sheetURI, tabId, epoch, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.tabId = tabId;
    callParams.epoch = epoch;
    var theName = "findCellsByEpoch";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetAndMeta

  exports.Sheet.getSheetAndMeta = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "getSheetAndMeta";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for exportSheetAsPdf

  exports.Sheet.exportSheetAsPdf = function(sheetURI, blobURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.blobURI = blobURI;
    var theName = "exportSheetAsPdf";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllStyles

  exports.Sheet.getAllStyles = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "getAllStyles";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeStyle

  exports.Sheet.removeStyle = function(sheetURI, styleName, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.styleName = styleName;
    var theName = "removeStyle";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createStyle

  exports.Sheet.createStyle = function(sheetURI, style, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.style = style;
    var theName = "createStyle";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllScripts

  exports.Sheet.getAllScripts = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "getAllScripts";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeScript

  exports.Sheet.removeScript = function(sheetURI, scriptName, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.scriptName = scriptName;
    var theName = "removeScript";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createScript

  exports.Sheet.createScript = function(sheetURI, scriptName, script, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.scriptName = scriptName;
    callParams.script = script;
    var theName = "createScript";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runScriptOnSheet

  exports.Sheet.runScriptOnSheet = function(sheetURI, scriptName, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.scriptName = scriptName;
    var theName = "runScriptOnSheet";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetScript

  exports.Sheet.getSheetScript = function(sheetURI, scriptName, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.scriptName = scriptName;
    var theName = "getSheetScript";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for exportSheetAsScript

  exports.Sheet.exportSheetAsScript = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "exportSheetAsScript";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetNamedSelections

  exports.Sheet.getSheetNamedSelections = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "getSheetNamedSelections";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetNamedSelection

  exports.Sheet.deleteSheetNamedSelection = function(sheetURI, rangeName,
    callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.rangeName = rangeName;
    var theName = "deleteSheetNamedSelection";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createSheetNamedSelection

  exports.Sheet.createSheetNamedSelection = function(sheetURI, rangeName, range,
    callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.rangeName = rangeName;
    callParams.range = range;
    var theName = "createSheetNamedSelection";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetNotes

  exports.Sheet.getSheetNotes = function(sheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    var theName = "getSheetNotes";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetNote

  exports.Sheet.deleteSheetNote = function(sheetURI, noteId, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.noteId = noteId;
    var theName = "deleteSheetNote";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createSheetNote

  exports.Sheet.createSheetNote = function(sheetURI, note, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.note = note;
    var theName = "createSheetNote";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for cloneSheet

  exports.Sheet.cloneSheet = function(sheetURI, newSheetURI, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.newSheetURI = newSheetURI;
    var theName = "cloneSheet";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSheetNamedSelection

  exports.Sheet.getSheetNamedSelection = function(sheetURI, rangeName, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.rangeName = rangeName;
    var theName = "getSheetNamedSelection";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetColumn

  exports.Sheet.deleteSheetColumn = function(sheetURI, column, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.column = column;
    var theName = "deleteSheetColumn";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetRow

  exports.Sheet.deleteSheetRow = function(sheetURI, row, callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.row = row;
    var theName = "deleteSheetRow";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSheetCell

  exports.Sheet.deleteSheetCell = function(sheetURI, row, column, tabId,
    callback) {
    var callParams = {};
    callParams.sheetURI = sheetURI;
    callParams.row = row;
    callParams.column = column;
    callParams.tabId = tabId;
    var theName = "deleteSheetCell";
    _genCall("Sheet", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getInstalledPlugins

  exports.Plugin.getInstalledPlugins = function(callback) {
    var callParams = {};
    var theName = "getInstalledPlugins";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPluginManifest

  exports.Plugin.getPluginManifest = function(manifestUri, callback) {
    var callParams = {};
    callParams.manifestUri = manifestUri;
    var theName = "getPluginManifest";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for recordPlugin

  exports.Plugin.recordPlugin = function(plugin, callback) {
    var callParams = {};
    callParams.plugin = plugin;
    var theName = "recordPlugin";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for installPlugin

  exports.Plugin.installPlugin = function(manifest, payload, callback) {
    var callParams = {};
    callParams.manifest = manifest;
    callParams.payload = payload;
    var theName = "installPlugin";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for installPluginItem

  exports.Plugin.installPluginItem = function(pluginName, item, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.item = item;
    var theName = "installPluginItem";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for uninstallPlugin

  exports.Plugin.uninstallPlugin = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "uninstallPlugin";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for uninstallPluginItem

  exports.Plugin.uninstallPluginItem = function(item, callback) {
    var callParams = {};
    callParams.item = item;
    var theName = "uninstallPluginItem";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deletePluginManifest

  exports.Plugin.deletePluginManifest = function(manifestUri, callback) {
    var callParams = {};
    callParams.manifestUri = manifestUri;
    var theName = "deletePluginManifest";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPluginItem

  exports.Plugin.getPluginItem = function(uri, callback) {
    var callParams = {};
    callParams.uri = uri;
    var theName = "getPluginItem";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for verifyPlugin

  exports.Plugin.verifyPlugin = function(plugin, callback) {
    var callParams = {};
    callParams.plugin = plugin;
    var theName = "verifyPlugin";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createManifest

  exports.Plugin.createManifest = function(pluginName, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    var theName = "createManifest";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addManifestItem

  exports.Plugin.addManifestItem = function(pluginName, uri, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.uri = uri;
    var theName = "addManifestItem";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addManifestDataFolder

  exports.Plugin.addManifestDataFolder = function(pluginName, uri, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.uri = uri;
    var theName = "addManifestDataFolder";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeManifestDataFolder

  exports.Plugin.removeManifestDataFolder = function(pluginName, uri, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.uri = uri;
    var theName = "removeManifestDataFolder";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setManifestVersion

  exports.Plugin.setManifestVersion = function(pluginName, version, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.version = version;
    var theName = "setManifestVersion";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeItemFromManifest

  exports.Plugin.removeItemFromManifest = function(pluginName, uri, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.uri = uri;
    var theName = "removeItemFromManifest";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for exportPlugin

  exports.Plugin.exportPlugin = function(pluginName, path, callback) {
    var callParams = {};
    callParams.pluginName = pluginName;
    callParams.path = path;
    var theName = "exportPlugin";
    _genCall("Plugin", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeServerCategory

  exports.Pipeline.removeServerCategory = function(category, callback) {
    var callParams = {};
    callParams.category = category;
    var theName = "removeServerCategory";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getServerCategories

  exports.Pipeline.getServerCategories = function(callback) {
    var callParams = {};
    var theName = "getServerCategories";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getBoundExchanges

  exports.Pipeline.getBoundExchanges = function(category, callback) {
    var callParams = {};
    callParams.category = category;
    var theName = "getBoundExchanges";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deregisterPipelineExchange

  exports.Pipeline.deregisterPipelineExchange = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "deregisterPipelineExchange";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getExchanges

  exports.Pipeline.getExchanges = function(callback) {
    var callParams = {};
    var theName = "getExchanges";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getExchange

  exports.Pipeline.getExchange = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "getExchange";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for publishMessageToCategory

  exports.Pipeline.publishMessageToCategory = function(task, callback) {
    var callParams = {};
    callParams.task = task;
    var theName = "publishMessageToCategory";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for broadcastMessageToCategory

  exports.Pipeline.broadcastMessageToCategory = function(task, callback) {
    var callParams = {};
    callParams.task = task;
    var theName = "broadcastMessageToCategory";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for broadcastMessageToAll

  exports.Pipeline.broadcastMessageToAll = function(task, callback) {
    var callParams = {};
    callParams.task = task;
    var theName = "broadcastMessageToAll";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getStatus

  exports.Pipeline.getStatus = function(taskId, callback) {
    var callParams = {};
    callParams.taskId = taskId;
    var theName = "getStatus";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for queryTasks

  exports.Pipeline.queryTasks = function(query, callback) {
    var callParams = {};
    callParams.query = query;
    var theName = "queryTasks";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for queryTasksOld

  exports.Pipeline.queryTasksOld = function(query, callback) {
    var callParams = {};
    callParams.query = query;
    var theName = "queryTasksOld";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLatestTaskEpoch

  exports.Pipeline.getLatestTaskEpoch = function(callback) {
    var callParams = {};
    var theName = "getLatestTaskEpoch";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for drainPipeline

  exports.Pipeline.drainPipeline = function(exchange, callback) {
    var callParams = {};
    callParams.exchange = exchange;
    var theName = "drainPipeline";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for registerExchangeDomain

  exports.Pipeline.registerExchangeDomain = function(domainURI, config,
    callback) {
    var callParams = {};
    callParams.domainURI = domainURI;
    callParams.config = config;
    var theName = "registerExchangeDomain";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deregisterExchangeDomain

  exports.Pipeline.deregisterExchangeDomain = function(domainURI, callback) {
    var callParams = {};
    callParams.domainURI = domainURI;
    var theName = "deregisterExchangeDomain";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getExchangeDomains

  exports.Pipeline.getExchangeDomains = function(callback) {
    var callParams = {};
    var theName = "getExchangeDomains";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setupStandardCategory

  exports.Pipeline.setupStandardCategory = function(category, callback) {
    var callParams = {};
    callParams.category = category;
    var theName = "setupStandardCategory";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for makeRPC

  exports.Pipeline.makeRPC = function(queueName, fnName, params,
    timeoutInSeconds, callback) {
    var callParams = {};
    callParams.queueName = queueName;
    callParams.fnName = fnName;
    callParams.params = params;
    callParams.timeoutInSeconds = timeoutInSeconds;
    var theName = "makeRPC";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createTopicExchange

  exports.Pipeline.createTopicExchange = function(domain, exchange, callback) {
    var callParams = {};
    callParams.domain = domain;
    callParams.exchange = exchange;
    var theName = "createTopicExchange";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for publishTopicMessage

  exports.Pipeline.publishTopicMessage = function(domain, exchange, topic,
    message, callback) {
    var callParams = {};
    callParams.domain = domain;
    callParams.exchange = exchange;
    callParams.topic = topic;
    callParams.message = message;
    var theName = "publishTopicMessage";
    _genCall("Pipeline", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for asyncReflexScript

  exports.Async.asyncReflexScript = function(reflexScript, parameters, callback) {
    var callParams = {};
    callParams.reflexScript = reflexScript;
    callParams.parameters = parameters;
    var theName = "asyncReflexScript";
    _genCall("Async", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for asyncReflexReference

  exports.Async.asyncReflexReference = function(scriptURI, parameters, callback) {
    var callParams = {};
    callParams.scriptURI = scriptURI;
    callParams.parameters = parameters;
    var theName = "asyncReflexReference";
    _genCall("Async", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for asyncStatus

  exports.Async.asyncStatus = function(taskId, callback) {
    var callParams = {};
    callParams.taskId = taskId;
    var theName = "asyncStatus";
    _genCall("Async", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setupDefaultWorkflows

  exports.Async.setupDefaultWorkflows = function(force, callback) {
    var callParams = {};
    callParams.force = force;
    var theName = "setupDefaultWorkflows";
    _genCall("Async", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for retrieveSystemConfig

  exports.Sys.retrieveSystemConfig = function(area, path, callback) {
    var callParams = {};
    callParams.area = area;
    callParams.path = path;
    var theName = "retrieveSystemConfig";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for writeSystemConfig

  exports.Sys.writeSystemConfig = function(area, path, content, callback) {
    var callParams = {};
    callParams.area = area;
    callParams.path = path;
    callParams.content = content;
    var theName = "writeSystemConfig";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeSystemConfig

  exports.Sys.removeSystemConfig = function(area, path, callback) {
    var callParams = {};
    callParams.area = area;
    callParams.path = path;
    var theName = "removeSystemConfig";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSystemFolders

  exports.Sys.getSystemFolders = function(area, path, callback) {
    var callParams = {};
    callParams.area = area;
    callParams.path = path;
    var theName = "getSystemFolders";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllTopLevelRepos

  exports.Sys.getAllTopLevelRepos = function(callback) {
    var callParams = {};
    var theName = "getAllTopLevelRepos";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listByUriPrefix

  exports.Sys.listByUriPrefix = function(raptureURI, marker, depth, maximum,
    refresh, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.marker = marker;
    callParams.depth = depth;
    callParams.maximum = maximum;
    callParams.refresh = refresh;
    var theName = "listByUriPrefix";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getChildren

  exports.Sys.getChildren = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "getChildren";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllChildren

  exports.Sys.getAllChildren = function(raptureURI, marker, maximum, refresh,
    callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.marker = marker;
    callParams.maximum = maximum;
    callParams.refresh = refresh;
    var theName = "getAllChildren";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getFolderInfo

  exports.Sys.getFolderInfo = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "getFolderInfo";
    _genCall("Sys", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createServerGroup

  exports.Runner.createServerGroup = function(name, description, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.description = description;
    var theName = "createServerGroup";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteServerGroup

  exports.Runner.deleteServerGroup = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "deleteServerGroup";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllServerGroups

  exports.Runner.getAllServerGroups = function(callback) {
    var callParams = {};
    var theName = "getAllServerGroups";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllApplicationDefinitions

  exports.Runner.getAllApplicationDefinitions = function(callback) {
    var callParams = {};
    var theName = "getAllApplicationDefinitions";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllLibraryDefinitions

  exports.Runner.getAllLibraryDefinitions = function(callback) {
    var callParams = {};
    var theName = "getAllLibraryDefinitions";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllApplicationInstances

  exports.Runner.getAllApplicationInstances = function(callback) {
    var callParams = {};
    var theName = "getAllApplicationInstances";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getServerGroup

  exports.Runner.getServerGroup = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "getServerGroup";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addGroupInclusion

  exports.Runner.addGroupInclusion = function(name, inclusion, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.inclusion = inclusion;
    var theName = "addGroupInclusion";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeGroupInclusion

  exports.Runner.removeGroupInclusion = function(name, inclusion, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.inclusion = inclusion;
    var theName = "removeGroupInclusion";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addGroupExclusion

  exports.Runner.addGroupExclusion = function(name, exclusion, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.exclusion = exclusion;
    var theName = "addGroupExclusion";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeGroupExclusion

  exports.Runner.removeGroupExclusion = function(name, exclusion, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.exclusion = exclusion;
    var theName = "removeGroupExclusion";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeGroupEntry

  exports.Runner.removeGroupEntry = function(name, entry, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.entry = entry;
    var theName = "removeGroupEntry";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createApplicationDefinition

  exports.Runner.createApplicationDefinition = function(name, ver, description,
    callback) {
    var callParams = {};
    callParams.name = name;
    callParams.ver = ver;
    callParams.description = description;
    var theName = "createApplicationDefinition";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteApplicationDefinition

  exports.Runner.deleteApplicationDefinition = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "deleteApplicationDefinition";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateApplicationVersion

  exports.Runner.updateApplicationVersion = function(name, ver, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.ver = ver;
    var theName = "updateApplicationVersion";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createLibraryDefinition

  exports.Runner.createLibraryDefinition = function(name, ver, description,
    callback) {
    var callParams = {};
    callParams.name = name;
    callParams.ver = ver;
    callParams.description = description;
    var theName = "createLibraryDefinition";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteLibraryDefinition

  exports.Runner.deleteLibraryDefinition = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "deleteLibraryDefinition";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLibraryDefinition

  exports.Runner.getLibraryDefinition = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "getLibraryDefinition";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateLibraryVersion

  exports.Runner.updateLibraryVersion = function(name, ver, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.ver = ver;
    var theName = "updateLibraryVersion";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addLibraryToGroup

  exports.Runner.addLibraryToGroup = function(serverGroup, libraryName,
    callback) {
    var callParams = {};
    callParams.serverGroup = serverGroup;
    callParams.libraryName = libraryName;
    var theName = "addLibraryToGroup";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeLibraryFromGroup

  exports.Runner.removeLibraryFromGroup = function(serverGroup, libraryName,
    callback) {
    var callParams = {};
    callParams.serverGroup = serverGroup;
    callParams.libraryName = libraryName;
    var theName = "removeLibraryFromGroup";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createApplicationInstance

  exports.Runner.createApplicationInstance = function(name, description,
    serverGroup, appName, timeRange, retryCount, parameters, apiUser, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.description = description;
    callParams.serverGroup = serverGroup;
    callParams.appName = appName;
    callParams.timeRange = timeRange;
    callParams.retryCount = retryCount;
    callParams.parameters = parameters;
    callParams.apiUser = apiUser;
    var theName = "createApplicationInstance";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runApplication

  exports.Runner.runApplication = function(appName, queueName, parameterInput,
    parameterOutput, callback) {
    var callParams = {};
    callParams.appName = appName;
    callParams.queueName = queueName;
    callParams.parameterInput = parameterInput;
    callParams.parameterOutput = parameterOutput;
    var theName = "runApplication";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runCustomApplication

  exports.Runner.runCustomApplication = function(appName, queueName,
    parameterInput, parameterOutput, customApplicationPath, callback) {
    var callParams = {};
    callParams.appName = appName;
    callParams.queueName = queueName;
    callParams.parameterInput = parameterInput;
    callParams.parameterOutput = parameterOutput;
    callParams.customApplicationPath = customApplicationPath;
    var theName = "runCustomApplication";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationStatus

  exports.Runner.getApplicationStatus = function(applicationStatusURI, callback) {
    var callParams = {};
    callParams.applicationStatusURI = applicationStatusURI;
    var theName = "getApplicationStatus";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationStatuses

  exports.Runner.getApplicationStatuses = function(date, callback) {
    var callParams = {};
    callParams.date = date;
    var theName = "getApplicationStatuses";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationStatusDates

  exports.Runner.getApplicationStatusDates = function(callback) {
    var callParams = {};
    var theName = "getApplicationStatusDates";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for archiveApplicationStatuses

  exports.Runner.archiveApplicationStatuses = function(callback) {
    var callParams = {};
    var theName = "archiveApplicationStatuses";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for changeApplicationStatus

  exports.Runner.changeApplicationStatus = function(applicationStatusURI,
    statusCode, message, callback) {
    var callParams = {};
    callParams.applicationStatusURI = applicationStatusURI;
    callParams.statusCode = statusCode;
    callParams.message = message;
    var theName = "changeApplicationStatus";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for recordStatusMessages

  exports.Runner.recordStatusMessages = function(applicationStatusURI, messages,
    callback) {
    var callParams = {};
    callParams.applicationStatusURI = applicationStatusURI;
    callParams.messages = messages;
    var theName = "recordStatusMessages";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for terminateApplication

  exports.Runner.terminateApplication = function(applicationStatusURI,
    reasonMessage, callback) {
    var callParams = {};
    callParams.applicationStatusURI = applicationStatusURI;
    callParams.reasonMessage = reasonMessage;
    var theName = "terminateApplication";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteApplicationInstance

  exports.Runner.deleteApplicationInstance = function(name, serverGroup,
    callback) {
    var callParams = {};
    callParams.name = name;
    callParams.serverGroup = serverGroup;
    var theName = "deleteApplicationInstance";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationInstance

  exports.Runner.getApplicationInstance = function(name, serverGroup, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.serverGroup = serverGroup;
    var theName = "getApplicationInstance";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateStatus

  exports.Runner.updateStatus = function(name, serverGroup, myServer, status,
    finished, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.serverGroup = serverGroup;
    callParams.myServer = myServer;
    callParams.status = status;
    callParams.finished = finished;
    var theName = "updateStatus";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationsForServerGroup

  exports.Runner.getApplicationsForServerGroup = function(serverGroup, callback) {
    var callParams = {};
    callParams.serverGroup = serverGroup;
    var theName = "getApplicationsForServerGroup";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationsForServer

  exports.Runner.getApplicationsForServer = function(serverName, callback) {
    var callParams = {};
    callParams.serverName = serverName;
    var theName = "getApplicationsForServer";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplicationDefinition

  exports.Runner.getApplicationDefinition = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "getApplicationDefinition";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setRunnerConfig

  exports.Runner.setRunnerConfig = function(name, value, callback) {
    var callParams = {};
    callParams.name = name;
    callParams.value = value;
    var theName = "setRunnerConfig";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteRunnerConfig

  exports.Runner.deleteRunnerConfig = function(name, callback) {
    var callParams = {};
    callParams.name = name;
    var theName = "deleteRunnerConfig";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRunnerConfig

  exports.Runner.getRunnerConfig = function(callback) {
    var callParams = {};
    var theName = "getRunnerConfig";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for recordRunnerStatus

  exports.Runner.recordRunnerStatus = function(serverName, serverGroup,
    appInstance, appName, status, callback) {
    var callParams = {};
    callParams.serverName = serverName;
    callParams.serverGroup = serverGroup;
    callParams.appInstance = appInstance;
    callParams.appName = appName;
    callParams.status = status;
    var theName = "recordRunnerStatus";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for recordInstanceCapabilities

  exports.Runner.recordInstanceCapabilities = function(serverName, instanceName,
    capabilities, callback) {
    var callParams = {};
    callParams.serverName = serverName;
    callParams.instanceName = instanceName;
    callParams.capabilities = capabilities;
    var theName = "recordInstanceCapabilities";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCapabilities

  exports.Runner.getCapabilities = function(serverName, instanceNames, callback) {
    var callParams = {};
    callParams.serverName = serverName;
    callParams.instanceNames = instanceNames;
    var theName = "getCapabilities";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRunnerServers

  exports.Runner.getRunnerServers = function(callback) {
    var callParams = {};
    var theName = "getRunnerServers";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRunnerStatus

  exports.Runner.getRunnerStatus = function(serverName, callback) {
    var callParams = {};
    callParams.serverName = serverName;
    var theName = "getRunnerStatus";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for cleanRunnerStatus

  exports.Runner.cleanRunnerStatus = function(ageInMinutes, callback) {
    var callParams = {};
    callParams.ageInMinutes = ageInMinutes;
    var theName = "cleanRunnerStatus";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for markForRestart

  exports.Runner.markForRestart = function(serverName, name, callback) {
    var callParams = {};
    callParams.serverName = serverName;
    callParams.name = name;
    var theName = "markForRestart";
    _genCall("Runner", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createSeriesRepo

  exports.Series.createSeriesRepo = function(seriesRepoUri, config, callback) {
    var callParams = {};
    callParams.seriesRepoUri = seriesRepoUri;
    callParams.config = config;
    var theName = "createSeriesRepo";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for seriesRepoExists

  exports.Series.seriesRepoExists = function(seriesRepoUri, callback) {
    var callParams = {};
    callParams.seriesRepoUri = seriesRepoUri;
    var theName = "seriesRepoExists";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for seriesExists

  exports.Series.seriesExists = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "seriesExists";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSeriesRepoConfig

  exports.Series.getSeriesRepoConfig = function(seriesRepoUri, callback) {
    var callParams = {};
    callParams.seriesRepoUri = seriesRepoUri;
    var theName = "getSeriesRepoConfig";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getSeriesRepoConfigs

  exports.Series.getSeriesRepoConfigs = function(callback) {
    var callParams = {};
    var theName = "getSeriesRepoConfigs";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSeriesRepo

  exports.Series.deleteSeriesRepo = function(seriesRepoUri, callback) {
    var callParams = {};
    callParams.seriesRepoUri = seriesRepoUri;
    var theName = "deleteSeriesRepo";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSeries

  exports.Series.deleteSeries = function(seriesRepoUri, callback) {
    var callParams = {};
    callParams.seriesRepoUri = seriesRepoUri;
    var theName = "deleteSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteSeriesByUriPrefix

  exports.Series.deleteSeriesByUriPrefix = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "deleteSeriesByUriPrefix";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addDoubleToSeries

  exports.Series.addDoubleToSeries = function(seriesUri, pointKey, pointValue,
    callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKey = pointKey;
    callParams.pointValue = pointValue;
    var theName = "addDoubleToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addLongToSeries

  exports.Series.addLongToSeries = function(seriesUri, pointKey, pointValue,
    callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKey = pointKey;
    callParams.pointValue = pointValue;
    var theName = "addLongToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addStringToSeries

  exports.Series.addStringToSeries = function(seriesUri, pointKey, pointValue,
    callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKey = pointKey;
    callParams.pointValue = pointValue;
    var theName = "addStringToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addStructureToSeries

  exports.Series.addStructureToSeries = function(seriesUri, pointKey,
    pointValue, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKey = pointKey;
    callParams.pointValue = pointValue;
    var theName = "addStructureToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addDoublesToSeries

  exports.Series.addDoublesToSeries = function(seriesUri, pointKeys,
    pointValues, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKeys = pointKeys;
    callParams.pointValues = pointValues;
    var theName = "addDoublesToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addLongsToSeries

  exports.Series.addLongsToSeries = function(seriesUri, pointKeys, pointValues,
    callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKeys = pointKeys;
    callParams.pointValues = pointValues;
    var theName = "addLongsToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addStringsToSeries

  exports.Series.addStringsToSeries = function(seriesUri, pointKeys,
    pointValues, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKeys = pointKeys;
    callParams.pointValues = pointValues;
    var theName = "addStringsToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addStructuresToSeries

  exports.Series.addStructuresToSeries = function(seriesUri, pointKeys,
    pointValues, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKeys = pointKeys;
    callParams.pointValues = pointValues;
    var theName = "addStructuresToSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deletePointsFromSeriesByPointKey

  exports.Series.deletePointsFromSeriesByPointKey = function(seriesUri,
    pointKeys, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.pointKeys = pointKeys;
    var theName = "deletePointsFromSeriesByPointKey";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deletePointsFromSeries

  exports.Series.deletePointsFromSeries = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "deletePointsFromSeries";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLastPoint

  exports.Series.getLastPoint = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "getLastPoint";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPoints

  exports.Series.getPoints = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "getPoints";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsAfter

  exports.Series.getPointsAfter = function(seriesUri, startColumn, maxNumber,
    callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsAfter";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsAfterReverse

  exports.Series.getPointsAfterReverse = function(seriesUri, startColumn,
    maxNumber, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsAfterReverse";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsInRange

  exports.Series.getPointsInRange = function(seriesUri, startColumn, endColumn,
    maxNumber, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.endColumn = endColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsInRange";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsAsDoubles

  exports.Series.getPointsAsDoubles = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "getPointsAsDoubles";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsAfterAsDoubles

  exports.Series.getPointsAfterAsDoubles = function(seriesUri, startColumn,
    maxNumber, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsAfterAsDoubles";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsInRangeAsDoubles

  exports.Series.getPointsInRangeAsDoubles = function(seriesUri, startColumn,
    endColumn, maxNumber, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.endColumn = endColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsInRangeAsDoubles";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsAsStrings

  exports.Series.getPointsAsStrings = function(seriesUri, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    var theName = "getPointsAsStrings";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsAfterAsStrings

  exports.Series.getPointsAfterAsStrings = function(seriesUri, startColumn,
    maxNumber, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsAfterAsStrings";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getPointsInRangeAsStrings

  exports.Series.getPointsInRangeAsStrings = function(seriesUri, startColumn,
    endColumn, maxNumber, callback) {
    var callParams = {};
    callParams.seriesUri = seriesUri;
    callParams.startColumn = startColumn;
    callParams.endColumn = endColumn;
    callParams.maxNumber = maxNumber;
    var theName = "getPointsInRangeAsStrings";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runSeriesScript

  exports.Series.runSeriesScript = function(scriptContent, arguments, callback) {
    var callParams = {};
    callParams.scriptContent = scriptContent;
    callParams.arguments = arguments;
    var theName = "runSeriesScript";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for runSeriesScriptQuiet

  exports.Series.runSeriesScriptQuiet = function(scriptContent, arguments,
    callback) {
    var callParams = {};
    callParams.scriptContent = scriptContent;
    callParams.arguments = arguments;
    var theName = "runSeriesScriptQuiet";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listSeriesByUriPrefix

  exports.Series.listSeriesByUriPrefix = function(uriPrefix, depth, callback) {
    var callParams = {};
    callParams.uriPrefix = uriPrefix;
    callParams.depth = depth;
    var theName = "listSeriesByUriPrefix";
    _genCall("Series", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllWorkflows

  exports.Decision.getAllWorkflows = function(callback) {
    var callParams = {};
    var theName = "getAllWorkflows";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkflowChildren

  exports.Decision.getWorkflowChildren = function(workflowURI, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    var theName = "getWorkflowChildren";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkOrderChildren

  exports.Decision.getWorkOrderChildren = function(parentPath, callback) {
    var callParams = {};
    callParams.parentPath = parentPath;
    var theName = "getWorkOrderChildren";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putWorkflow

  exports.Decision.putWorkflow = function(workflow, callback) {
    var callParams = {};
    callParams.workflow = workflow;
    var theName = "putWorkflow";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkflow

  exports.Decision.getWorkflow = function(workflowURI, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    var theName = "getWorkflow";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkflowStep

  exports.Decision.getWorkflowStep = function(stepURI, callback) {
    var callParams = {};
    callParams.stepURI = stepURI;
    var theName = "getWorkflowStep";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getStepCategory

  exports.Decision.getStepCategory = function(stepURI, callback) {
    var callParams = {};
    callParams.stepURI = stepURI;
    var theName = "getStepCategory";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addStep

  exports.Decision.addStep = function(workflowURI, step, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.step = step;
    var theName = "addStep";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeStep

  exports.Decision.removeStep = function(workflowURI, stepName, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.stepName = stepName;
    var theName = "removeStep";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addTransition

  exports.Decision.addTransition = function(workflowURI, stepName, transition,
    callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.stepName = stepName;
    callParams.transition = transition;
    var theName = "addTransition";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for removeTransition

  exports.Decision.removeTransition = function(workflowURI, stepName,
    transitionName, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.stepName = stepName;
    callParams.transitionName = transitionName;
    var theName = "removeTransition";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteWorkflow

  exports.Decision.deleteWorkflow = function(workflowURI, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    var theName = "deleteWorkflow";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createWorkOrder

  exports.Decision.createWorkOrder = function(workflowURI, argsMap, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.argsMap = argsMap;
    var theName = "createWorkOrder";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createWorkOrderP

  exports.Decision.createWorkOrderP = function(workflowURI, argsMap,
    appStatusUriPattern, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.argsMap = argsMap;
    callParams.appStatusUriPattern = appStatusUriPattern;
    var theName = "createWorkOrderP";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for releaseWorkOrderLock

  exports.Decision.releaseWorkOrderLock = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "releaseWorkOrderLock";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkOrderStatus

  exports.Decision.getWorkOrderStatus = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "getWorkOrderStatus";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for writeWorkflowAuditEntry

  exports.Decision.writeWorkflowAuditEntry = function(workOrderURI, message,
    error, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    callParams.message = message;
    callParams.error = error;
    var theName = "writeWorkflowAuditEntry";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkOrdersByDay

  exports.Decision.getWorkOrdersByDay = function(startTimeInstant, callback) {
    var callParams = {};
    callParams.startTimeInstant = startTimeInstant;
    var theName = "getWorkOrdersByDay";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkOrder

  exports.Decision.getWorkOrder = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "getWorkOrder";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorker

  exports.Decision.getWorker = function(workOrderURI, workerId, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    callParams.workerId = workerId;
    var theName = "getWorker";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for cancelWorkOrder

  exports.Decision.cancelWorkOrder = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "cancelWorkOrder";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for resumeWorkOrder

  exports.Decision.resumeWorkOrder = function(workOrderURI, resumeStepURI,
    callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    callParams.resumeStepURI = resumeStepURI;
    var theName = "resumeWorkOrder";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for wasCancelCalled

  exports.Decision.wasCancelCalled = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "wasCancelCalled";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCancellationDetails

  exports.Decision.getCancellationDetails = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "getCancellationDetails";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getWorkOrderDebug

  exports.Decision.getWorkOrderDebug = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "getWorkOrderDebug";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setWorkOrderIdGenConfig

  exports.Decision.setWorkOrderIdGenConfig = function(config, force, callback) {
    var callParams = {};
    callParams.config = config;
    callParams.force = force;
    var theName = "setWorkOrderIdGenConfig";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setContextLiteral

  exports.Decision.setContextLiteral = function(workerURI, varAlias,
    literalValue, callback) {
    var callParams = {};
    callParams.workerURI = workerURI;
    callParams.varAlias = varAlias;
    callParams.literalValue = literalValue;
    var theName = "setContextLiteral";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setContextLink

  exports.Decision.setContextLink = function(workerURI, varAlias,
    expressionValue, callback) {
    var callParams = {};
    callParams.workerURI = workerURI;
    callParams.varAlias = varAlias;
    callParams.expressionValue = expressionValue;
    var theName = "setContextLink";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getContextValue

  exports.Decision.getContextValue = function(workerURI, varAlias, callback) {
    var callParams = {};
    callParams.workerURI = workerURI;
    callParams.varAlias = varAlias;
    var theName = "getContextValue";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addErrorToContext

  exports.Decision.addErrorToContext = function(workerURI, errorWrapper,
    callback) {
    var callParams = {};
    callParams.workerURI = workerURI;
    callParams.errorWrapper = errorWrapper;
    var theName = "addErrorToContext";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getErrorsFromContext

  exports.Decision.getErrorsFromContext = function(workerURI, callback) {
    var callParams = {};
    callParams.workerURI = workerURI;
    var theName = "getErrorsFromContext";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getExceptionInfo

  exports.Decision.getExceptionInfo = function(workOrderURI, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    var theName = "getExceptionInfo";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for reportStepProgress

  exports.Decision.reportStepProgress = function(workerURI, stepStartTime,
    message, progress, max, callback) {
    var callParams = {};
    callParams.workerURI = workerURI;
    callParams.stepStartTime = stepStartTime;
    callParams.message = message;
    callParams.progress = progress;
    callParams.max = max;
    var theName = "reportStepProgress";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAppStatuses

  exports.Decision.getAppStatuses = function(prefix, callback) {
    var callParams = {};
    callParams.prefix = prefix;
    var theName = "getAppStatuses";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAppStatusDetails

  exports.Decision.getAppStatusDetails = function(prefix, extraContextValues,
    callback) {
    var callParams = {};
    callParams.prefix = prefix;
    callParams.extraContextValues = extraContextValues;
    var theName = "getAppStatusDetails";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getMonthlyMetrics

  exports.Decision.getMonthlyMetrics = function(workflowURI, jobURI,
    argsHashValue, state, callback) {
    var callParams = {};
    callParams.workflowURI = workflowURI;
    callParams.jobURI = jobURI;
    callParams.argsHashValue = argsHashValue;
    callParams.state = state;
    var theName = "getMonthlyMetrics";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for queryLogs

  exports.Decision.queryLogs = function(workOrderURI, startTime, endTime,
    keepAlive, bufferSize, nextBatchId, stepName, stepStartTime, callback) {
    var callParams = {};
    callParams.workOrderURI = workOrderURI;
    callParams.startTime = startTime;
    callParams.endTime = endTime;
    callParams.keepAlive = keepAlive;
    callParams.bufferSize = bufferSize;
    callParams.nextBatchId = nextBatchId;
    callParams.stepName = stepName;
    callParams.stepStartTime = stepStartTime;
    var theName = "queryLogs";
    _genCall("Decision", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getContent

  exports.Repo.getContent = function(raptureURI, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    var theName = "getContent";
    _genCall("Repo", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putContent

  exports.Repo.putContent = function(raptureURI, content, comment, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.content = content;
    callParams.comment = comment;
    var theName = "putContent";
    _genCall("Repo", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteContent

  exports.Repo.deleteContent = function(raptureURI, comment, callback) {
    var callParams = {};
    callParams.raptureURI = raptureURI;
    callParams.comment = comment;
    var theName = "deleteContent";
    _genCall("Repo", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for validateDocRepo

  exports.Doc.validateDocRepo = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "validateDocRepo";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createDocRepo

  exports.Doc.createDocRepo = function(docRepoUri, config, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    callParams.config = config;
    var theName = "createDocRepo";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for docRepoExists

  exports.Doc.docRepoExists = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "docRepoExists";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for docExists

  exports.Doc.docExists = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "docExists";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocRepoConfig

  exports.Doc.getDocRepoConfig = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "getDocRepoConfig";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocRepoStatus

  exports.Doc.getDocRepoStatus = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "getDocRepoStatus";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocRepoConfigs

  exports.Doc.getDocRepoConfigs = function(callback) {
    var callParams = {};
    var theName = "getDocRepoConfigs";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteDocRepo

  exports.Doc.deleteDocRepo = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "deleteDocRepo";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for archiveRepoDocs

  exports.Doc.archiveRepoDocs = function(docRepoUri, versionLimit, timeLimit,
    ensureVersionLimit, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    callParams.versionLimit = versionLimit;
    callParams.timeLimit = timeLimit;
    callParams.ensureVersionLimit = ensureVersionLimit;
    var theName = "archiveRepoDocs";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocAndMeta

  exports.Doc.getDocAndMeta = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "getDocAndMeta";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocMeta

  exports.Doc.getDocMeta = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "getDocMeta";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for revertDoc

  exports.Doc.revertDoc = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "revertDoc";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDoc

  exports.Doc.getDoc = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "getDoc";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putDoc

  exports.Doc.putDoc = function(docUri, content, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    callParams.content = content;
    var theName = "putDoc";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putDocWithVersion

  exports.Doc.putDocWithVersion = function(docUri, content, currentVersion,
    callback) {
    var callParams = {};
    callParams.docUri = docUri;
    callParams.content = content;
    callParams.currentVersion = currentVersion;
    var theName = "putDocWithVersion";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putDocWithEventContext

  exports.Doc.putDocWithEventContext = function(docUri, content, eventContext,
    callback) {
    var callParams = {};
    callParams.docUri = docUri;
    callParams.content = content;
    callParams.eventContext = eventContext;
    var theName = "putDocWithEventContext";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteDoc

  exports.Doc.deleteDoc = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "deleteDoc";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for renameDoc

  exports.Doc.renameDoc = function(fromDocUri, toDocUri, callback) {
    var callParams = {};
    callParams.fromDocUri = fromDocUri;
    callParams.toDocUri = toDocUri;
    var theName = "renameDoc";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocs

  exports.Doc.getDocs = function(docUris, callback) {
    var callParams = {};
    callParams.docUris = docUris;
    var theName = "getDocs";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocAndMetas

  exports.Doc.getDocAndMetas = function(docUris, callback) {
    var callParams = {};
    callParams.docUris = docUris;
    var theName = "getDocAndMetas";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for docsExist

  exports.Doc.docsExist = function(docUris, callback) {
    var callParams = {};
    callParams.docUris = docUris;
    var theName = "docsExist";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putDocs

  exports.Doc.putDocs = function(docUris, contents, callback) {
    var callParams = {};
    callParams.docUris = docUris;
    callParams.contents = contents;
    var theName = "putDocs";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for renameDocs

  exports.Doc.renameDocs = function(authority, comment, fromDocUris, toDocUris,
    callback) {
    var callParams = {};
    callParams.authority = authority;
    callParams.comment = comment;
    callParams.fromDocUris = fromDocUris;
    callParams.toDocUris = toDocUris;
    var theName = "renameDocs";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteDocsByUriPrefix

  exports.Doc.deleteDocsByUriPrefix = function(docUri, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    var theName = "deleteDocsByUriPrefix";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for listDocsByUriPrefix

  exports.Doc.listDocsByUriPrefix = function(docUri, depth, callback) {
    var callParams = {};
    callParams.docUri = docUri;
    callParams.depth = depth;
    var theName = "listDocsByUriPrefix";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setDocAttribute

  exports.Doc.setDocAttribute = function(attributeUri, value, callback) {
    var callParams = {};
    callParams.attributeUri = attributeUri;
    callParams.value = value;
    var theName = "setDocAttribute";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setDocAttributes

  exports.Doc.setDocAttributes = function(attributeUri, keys, values, callback) {
    var callParams = {};
    callParams.attributeUri = attributeUri;
    callParams.keys = keys;
    callParams.values = values;
    var theName = "setDocAttributes";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocAttribute

  exports.Doc.getDocAttribute = function(attributeUri, callback) {
    var callParams = {};
    callParams.attributeUri = attributeUri;
    var theName = "getDocAttribute";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocAttributes

  exports.Doc.getDocAttributes = function(attributeUri, callback) {
    var callParams = {};
    callParams.attributeUri = attributeUri;
    var theName = "getDocAttributes";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteDocAttribute

  exports.Doc.deleteDocAttribute = function(attributeUri, callback) {
    var callParams = {};
    callParams.attributeUri = attributeUri;
    var theName = "deleteDocAttribute";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocRepoIdGenUri

  exports.Doc.getDocRepoIdGenUri = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "getDocRepoIdGenUri";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setDocRepoIdGenConfig

  exports.Doc.setDocRepoIdGenConfig = function(docRepoUri, idGenConfig,
    callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    callParams.idGenConfig = idGenConfig;
    var theName = "setDocRepoIdGenConfig";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDocRepoIdGenConfig

  exports.Doc.getDocRepoIdGenConfig = function(docRepoUri, callback) {
    var callParams = {};
    callParams.docRepoUri = docRepoUri;
    var theName = "getDocRepoIdGenConfig";
    _genCall("Doc", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createRelationshipRepo

  exports.Relationship.createRelationshipRepo = function(relationshipRepoURI,
    config, callback) {
    var callParams = {};
    callParams.relationshipRepoURI = relationshipRepoURI;
    callParams.config = config;
    var theName = "createRelationshipRepo";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRelationshipRepoConfig

  exports.Relationship.getRelationshipRepoConfig = function(blobRepoURI,
    callback) {
    var callParams = {};
    callParams.blobRepoURI = blobRepoURI;
    var theName = "getRelationshipRepoConfig";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllRelationshipRepoConfigs

  exports.Relationship.getAllRelationshipRepoConfigs = function(callback) {
    var callParams = {};
    var theName = "getAllRelationshipRepoConfigs";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteRelationshipRepo

  exports.Relationship.deleteRelationshipRepo = function(repoURI, callback) {
    var callParams = {};
    callParams.repoURI = repoURI;
    var theName = "deleteRelationshipRepo";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for doesRelationshipRepoExist

  exports.Relationship.doesRelationshipRepoExist = function(repoURI, callback) {
    var callParams = {};
    callParams.repoURI = repoURI;
    var theName = "doesRelationshipRepoExist";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for doesRelationshipExist

  exports.Relationship.doesRelationshipExist = function(relationshipURI,
    callback) {
    var callParams = {};
    callParams.relationshipURI = relationshipURI;
    var theName = "doesRelationshipExist";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createRelationship

  exports.Relationship.createRelationship = function(relationshipAuthorityURI,
    fromURI, toURI, label, properties, callback) {
    var callParams = {};
    callParams.relationshipAuthorityURI = relationshipAuthorityURI;
    callParams.fromURI = fromURI;
    callParams.toURI = toURI;
    callParams.label = label;
    callParams.properties = properties;
    var theName = "createRelationship";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRelationship

  exports.Relationship.getRelationship = function(relationshipURI, callback) {
    var callParams = {};
    callParams.relationshipURI = relationshipURI;
    var theName = "getRelationship";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteRelationship

  exports.Relationship.deleteRelationship = function(relationshipURI, callback) {
    var callParams = {};
    callParams.relationshipURI = relationshipURI;
    var theName = "deleteRelationship";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getOutboundRelationships

  exports.Relationship.getOutboundRelationships = function(relationshipRepoURI,
    fromURI, callback) {
    var callParams = {};
    callParams.relationshipRepoURI = relationshipRepoURI;
    callParams.fromURI = fromURI;
    var theName = "getOutboundRelationships";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getInboundRelationships

  exports.Relationship.getInboundRelationships = function(relationshipRepoURI,
    toURI, callback) {
    var callParams = {};
    callParams.relationshipRepoURI = relationshipRepoURI;
    callParams.toURI = toURI;
    var theName = "getInboundRelationships";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLabledRelationships

  exports.Relationship.getLabledRelationships = function(relationshipRepoURI,
    relationshipLabel, callback) {
    var callParams = {};
    callParams.relationshipRepoURI = relationshipRepoURI;
    callParams.relationshipLabel = relationshipLabel;
    var theName = "getLabledRelationships";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getChildren

  exports.Relationship.getChildren = function(prefix, callback) {
    var callParams = {};
    callParams.prefix = prefix;
    var theName = "getChildren";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getAllChildrenMap

  exports.Relationship.getAllChildrenMap = function(prefix, callback) {
    var callParams = {};
    callParams.prefix = prefix;
    var theName = "getAllChildrenMap";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getRelationshipCenteredOn

  exports.Relationship.getRelationshipCenteredOn = function(relationshipNodeURI,
    options, callback) {
    var callParams = {};
    callParams.relationshipNodeURI = relationshipNodeURI;
    callParams.options = options;
    var theName = "getRelationshipCenteredOn";
    _genCall("Relationship", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getNetworkInfo

  exports.Environment.getNetworkInfo = function(callback) {
    var callParams = {};
    var theName = "getNetworkInfo";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setNetworkInfo

  exports.Environment.setNetworkInfo = function(network, callback) {
    var callParams = {};
    callParams.network = network;
    var theName = "setNetworkInfo";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getThisServer

  exports.Environment.getThisServer = function(callback) {
    var callParams = {};
    var theName = "getThisServer";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getServers

  exports.Environment.getServers = function(callback) {
    var callParams = {};
    var theName = "getServers";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setThisServer

  exports.Environment.setThisServer = function(info, callback) {
    var callParams = {};
    callParams.info = info;
    var theName = "setThisServer";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for setApplianceMode

  exports.Environment.setApplianceMode = function(mode, callback) {
    var callParams = {};
    callParams.mode = mode;
    var theName = "setApplianceMode";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getApplianceMode

  exports.Environment.getApplianceMode = function(callback) {
    var callParams = {};
    var theName = "getApplianceMode";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getServerStatus

  exports.Environment.getServerStatus = function(callback) {
    var callParams = {};
    var theName = "getServerStatus";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getLicenseInfo

  exports.Environment.getLicenseInfo = function(callback) {
    var callParams = {};
    var theName = "getLicenseInfo";
    _genCall("Environment", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for putTemplate

  exports.Question.putTemplate = function(qTemplateURI, template, callback) {
    var callParams = {};
    callParams.qTemplateURI = qTemplateURI;
    callParams.template = template;
    var theName = "putTemplate";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getTemplate

  exports.Question.getTemplate = function(qTemplateURI, callback) {
    var callParams = {};
    callParams.qTemplateURI = qTemplateURI;
    var theName = "getTemplate";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getQuestion

  exports.Question.getQuestion = function(questionURI, callback) {
    var callParams = {};
    callParams.questionURI = questionURI;
    var theName = "getQuestion";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for askQuestion

  exports.Question.askQuestion = function(qTemplateURI, variables, callback,
    callback) {
    var callParams = {};
    callParams.qTemplateURI = qTemplateURI;
    callParams.variables = variables;
    callParams.callback = callback;
    var theName = "askQuestion";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getQNotifications

  exports.Question.getQNotifications = function(search, callback) {
    var callParams = {};
    callParams.search = search;
    var theName = "getQNotifications";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getQNotificationURIs

  exports.Question.getQNotificationURIs = function(search, callback) {
    var callParams = {};
    callParams.search = search;
    var theName = "getQNotificationURIs";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for answerQuestion

  exports.Question.answerQuestion = function(questionURI, response, data,
    callback) {
    var callParams = {};
    callParams.questionURI = questionURI;
    callParams.response = response;
    callParams.data = data;
    var theName = "answerQuestion";
    _genCall("Question", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createStructuredRepo

  exports.Structured.createStructuredRepo = function(uri, config, callback) {
    var callParams = {};
    callParams.uri = uri;
    callParams.config = config;
    var theName = "createStructuredRepo";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteStructuredRepo

  exports.Structured.deleteStructuredRepo = function(uri, callback) {
    var callParams = {};
    callParams.uri = uri;
    var theName = "deleteStructuredRepo";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for structuredRepoExists

  exports.Structured.structuredRepoExists = function(uri, callback) {
    var callParams = {};
    callParams.uri = uri;
    var theName = "structuredRepoExists";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getStructuredRepoConfig

  exports.Structured.getStructuredRepoConfig = function(uri, callback) {
    var callParams = {};
    callParams.uri = uri;
    var theName = "getStructuredRepoConfig";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getStructuredRepoConfigs

  exports.Structured.getStructuredRepoConfigs = function(callback) {
    var callParams = {};
    var theName = "getStructuredRepoConfigs";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createTableUsingSql

  exports.Structured.createTableUsingSql = function(schema, rawSql, callback) {
    var callParams = {};
    callParams.schema = schema;
    callParams.rawSql = rawSql;
    var theName = "createTableUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createTable

  exports.Structured.createTable = function(tableUri, columns, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columns = columns;
    var theName = "createTable";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for dropTable

  exports.Structured.dropTable = function(tableUri, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    var theName = "dropTable";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for tableExists

  exports.Structured.tableExists = function(tableUri, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    var theName = "tableExists";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for describeTable

  exports.Structured.describeTable = function(tableUri, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    var theName = "describeTable";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for addTableColumns

  exports.Structured.addTableColumns = function(tableUri, columns, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columns = columns;
    var theName = "addTableColumns";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteTableColumns

  exports.Structured.deleteTableColumns = function(tableUri, columnNames,
    callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columnNames = columnNames;
    var theName = "deleteTableColumns";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateTableColumns

  exports.Structured.updateTableColumns = function(tableUri, columns, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columns = columns;
    var theName = "updateTableColumns";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for renameTableColumns

  exports.Structured.renameTableColumns = function(tableUri, columnNames,
    callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columnNames = columnNames;
    var theName = "renameTableColumns";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createIndex

  exports.Structured.createIndex = function(tableUri, indexName, columnNames,
    callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.indexName = indexName;
    callParams.columnNames = columnNames;
    var theName = "createIndex";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for dropIndex

  exports.Structured.dropIndex = function(tableUri, indexName, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.indexName = indexName;
    var theName = "dropIndex";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for selectJoinedRows

  exports.Structured.selectJoinedRows = function(tableUris, columnNames, from,
    where, order, ascending, limit, callback) {
    var callParams = {};
    callParams.tableUris = tableUris;
    callParams.columnNames = columnNames;
    callParams.from = from;
    callParams.where = where;
    callParams.order = order;
    callParams.ascending = ascending;
    callParams.limit = limit;
    var theName = "selectJoinedRows";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for selectUsingSql

  exports.Structured.selectUsingSql = function(schema, rawSql, callback) {
    var callParams = {};
    callParams.schema = schema;
    callParams.rawSql = rawSql;
    var theName = "selectUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for selectRows

  exports.Structured.selectRows = function(tableUri, columnNames, where, order,
    ascending, limit, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columnNames = columnNames;
    callParams.where = where;
    callParams.order = order;
    callParams.ascending = ascending;
    callParams.limit = limit;
    var theName = "selectRows";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for insertUsingSql

  exports.Structured.insertUsingSql = function(schema, rawSql, callback) {
    var callParams = {};
    callParams.schema = schema;
    callParams.rawSql = rawSql;
    var theName = "insertUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for insertRow

  exports.Structured.insertRow = function(tableUri, values, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.values = values;
    var theName = "insertRow";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for insertRows

  exports.Structured.insertRows = function(tableUri, values, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.values = values;
    var theName = "insertRows";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteUsingSql

  exports.Structured.deleteUsingSql = function(schema, rawSql, callback) {
    var callParams = {};
    callParams.schema = schema;
    callParams.rawSql = rawSql;
    var theName = "deleteUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for deleteRows

  exports.Structured.deleteRows = function(tableUri, where, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.where = where;
    var theName = "deleteRows";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateUsingSql

  exports.Structured.updateUsingSql = function(schema, rawSql, callback) {
    var callParams = {};
    callParams.schema = schema;
    callParams.rawSql = rawSql;
    var theName = "updateUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for updateRows

  exports.Structured.updateRows = function(tableUri, values, where, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.values = values;
    callParams.where = where;
    var theName = "updateRows";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for begin

  exports.Structured.begin = function(callback) {
    var callParams = {};
    var theName = "begin";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for commit

  exports.Structured.commit = function(callback) {
    var callParams = {};
    var theName = "commit";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for rollback

  exports.Structured.rollback = function(callback) {
    var callParams = {};
    var theName = "rollback";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for abort

  exports.Structured.abort = function(transactionId, callback) {
    var callParams = {};
    callParams.transactionId = transactionId;
    var theName = "abort";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getTransactions

  exports.Structured.getTransactions = function(callback) {
    var callParams = {};
    var theName = "getTransactions";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getDdl

  exports.Structured.getDdl = function(uri, includeTableData, callback) {
    var callParams = {};
    callParams.uri = uri;
    callParams.includeTableData = includeTableData;
    var theName = "getDdl";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCursorUsingSql

  exports.Structured.getCursorUsingSql = function(schema, rawSql, callback) {
    var callParams = {};
    callParams.schema = schema;
    callParams.rawSql = rawSql;
    var theName = "getCursorUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCursor

  exports.Structured.getCursor = function(tableUri, columnNames, where, order,
    ascending, limit, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.columnNames = columnNames;
    callParams.where = where;
    callParams.order = order;
    callParams.ascending = ascending;
    callParams.limit = limit;
    var theName = "getCursor";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for getCursorForJoin

  exports.Structured.getCursorForJoin = function(tableUris, columnNames, from,
    where, order, ascending, limit, callback) {
    var callParams = {};
    callParams.tableUris = tableUris;
    callParams.columnNames = columnNames;
    callParams.from = from;
    callParams.where = where;
    callParams.order = order;
    callParams.ascending = ascending;
    callParams.limit = limit;
    var theName = "getCursorForJoin";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for next

  exports.Structured.next = function(tableUri, cursorId, count, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.cursorId = cursorId;
    callParams.count = count;
    var theName = "next";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for previous

  exports.Structured.previous = function(tableUri, cursorId, count, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.cursorId = cursorId;
    callParams.count = count;
    var theName = "previous";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for closeCursor

  exports.Structured.closeCursor = function(tableUri, cursorId, callback) {
    var callParams = {};
    callParams.tableUri = tableUri;
    callParams.cursorId = cursorId;
    var theName = "closeCursor";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for createProcedureCallUsingSql

  exports.Structured.createProcedureCallUsingSql = function(procUri, rawSql,
    callback) {
    var callParams = {};
    callParams.procUri = procUri;
    callParams.rawSql = rawSql;
    var theName = "createProcedureCallUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for callProcedure

  exports.Structured.callProcedure = function(procUri, params, callback) {
    var callParams = {};
    callParams.procUri = procUri;
    callParams.params = params;
    var theName = "callProcedure";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  },
  // Function for dropProcedureUsingSql

  exports.Structured.dropProcedureUsingSql = function(procUri, rawSql, callback) {
    var callParams = {};
    callParams.procUri = procUri;
    callParams.rawSql = rawSql;
    var theName = "dropProcedureUsingSql";
    _genCall("Structured", theName, callParams, function(resp) {
      var d = JSON.parse(resp);
      if (d.inError) {
        callback(d.message, null);
      } else {
        ctx.lastStats = d.perfStats;
        callback(null, d.response);
      }
    });
  }
